{"remainingRequest":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\angular-auth-oidc-client\\modules\\angular-auth-oidc-client.es5.js","dependencies":[{"path":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\angular-auth-oidc-client\\modules\\angular-auth-oidc-client.es5.js","mtime":499162500000},{"path":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533286963592},{"path":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function () { if (t[0] & 1)\n            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f)\n            throw new TypeError(\"Generator is already executing.\");\n        while (_)\n            try {\n                if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done)\n                    return t;\n                if (y = 0, t)\n                    op = [0, t.value];\n                switch (op[0]) {\n                    case 0:\n                    case 1:\n                        t = op;\n                        break;\n                    case 4:\n                        _.label++;\n                        return { value: op[1], done: false };\n                    case 5:\n                        _.label++;\n                        y = op[1];\n                        op = [0];\n                        continue;\n                    case 7:\n                        op = _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                    default:\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                            _ = 0;\n                            continue;\n                        }\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                            _.label = op[1];\n                            break;\n                        }\n                        if (op[0] === 6 && _.label < t[1]) {\n                            _.label = t[1];\n                            t = op;\n                            break;\n                        }\n                        if (t && _.label < t[2]) {\n                            _.label = t[2];\n                            _.ops.push(op);\n                            break;\n                        }\n                        if (t[2])\n                            _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                }\n                op = body.call(thisArg, _);\n            }\n            catch (e) {\n                op = [6, e];\n                y = 0;\n            }\n            finally {\n                f = t = 0;\n            }\n        if (op[0] & 5)\n            throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { EventEmitter, Inject, Injectable, NgModule, NgZone, Output, PLATFORM_ID } from '@angular/core';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { catchError, map } from 'rxjs/operators';\nimport { KEYUTIL, KJUR, hextob64u } from 'jsrsasign';\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            }\n            catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            }\n            catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcConfigService = /** @class */ /*@__PURE__*/ (function () {\n    function OidcConfigService() {\n        this.onConfigurationLoaded = new EventEmitter();\n    }\n    /**\n     * @param {?} configUrl\n     * @return {?}\n     */\n    OidcConfigService.prototype.load = function (configUrl) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, err_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 4, , 5]);\n                        return [4 /*yield*/, fetch(configUrl)];\n                    case 1:\n                        response = _b.sent();\n                        if (!response.ok) {\n                            throw new Error(response.statusText);\n                        }\n                        _a = this;\n                        return [4 /*yield*/, response.json()];\n                    case 2:\n                        _a.clientConfiguration = _b.sent();\n                        return [4 /*yield*/, this.load_using_stsServer(this.clientConfiguration.stsServer)];\n                    case 3:\n                        _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _b.sent();\n                        console.error(\"OidcConfigService 'load' threw an error on calling \" + configUrl, err_1);\n                        this.onConfigurationLoaded.emit(false);\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @param {?} stsServer\n     * @return {?}\n     */\n    OidcConfigService.prototype.load_using_stsServer = function (stsServer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, err_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, fetch(stsServer + \"/.well-known/openid-configuration\")];\n                    case 1:\n                        response = _b.sent();\n                        if (!response.ok) {\n                            throw new Error(response.statusText);\n                        }\n                        _a = this;\n                        return [4 /*yield*/, response.json()];\n                    case 2:\n                        _a.wellKnownEndpoints = _b.sent();\n                        this.onConfigurationLoaded.emit(true);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_2 = _b.sent();\n                        console.error(\"OidcConfigService 'load_using_stsServer' threw an error on calling \" + stsServer, err_2);\n                        this.onConfigurationLoaded.emit(false);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @param {?} stsServer\n     * @return {?}\n     */\n    OidcConfigService.prototype.load_using_custom_stsServer = function (stsServer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, err_3;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, fetch(stsServer)];\n                    case 1:\n                        response = _b.sent();\n                        if (!response.ok) {\n                            throw new Error(response.statusText);\n                        }\n                        _a = this;\n                        return [4 /*yield*/, response.json()];\n                    case 2:\n                        _a.wellKnownEndpoints = _b.sent();\n                        this.onConfigurationLoaded.emit(true);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_3 = _b.sent();\n                        console.error(\"OidcConfigService 'load_using_custom_stsServer' threw an error on calling \" + stsServer, err_3);\n                        this.onConfigurationLoaded.emit(false);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return OidcConfigService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar AuthorizationResult = /*@__PURE__*/ (function () {\n    var AuthorizationResult = {\n        authorized: 1,\n        forbidden: 2,\n        unauthorized: 3,\n    };\n    AuthorizationResult[AuthorizationResult.authorized] = \"authorized\";\n    AuthorizationResult[AuthorizationResult.forbidden] = \"forbidden\";\n    AuthorizationResult[AuthorizationResult.unauthorized] = \"unauthorized\";\n    return AuthorizationResult;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ValidateStateResult = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} access_token\n     * @param {?=} id_token\n     * @param {?=} authResponseIsValid\n     * @param {?=} decoded_id_token\n     */\n    function ValidateStateResult(access_token, id_token, authResponseIsValid, decoded_id_token) {\n        if (access_token === void 0) {\n            access_token = '';\n        }\n        if (id_token === void 0) {\n            id_token = '';\n        }\n        if (authResponseIsValid === void 0) {\n            authResponseIsValid = false;\n        }\n        this.access_token = access_token;\n        this.id_token = id_token;\n        this.authResponseIsValid = authResponseIsValid;\n        this.decoded_id_token = decoded_id_token;\n    }\n    return ValidateStateResult;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DefaultConfiguration = /** @class */ /*@__PURE__*/ (function () {\n    function DefaultConfiguration() {\n        this.stsServer = 'https://localhost:44318';\n        this.redirect_url = 'https://localhost:44311';\n        // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n        // by the iss (issuer) Claim as an audience.\n        // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n        // or if it contains additional audiences not trusted by the Client.\n        this.client_id = 'angularclient';\n        this.response_type = 'id_token token';\n        this.scope = 'openid email profile';\n        // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\n        this.hd_param = '';\n        this.post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\n        this.start_checksession = false;\n        this.silent_renew = true;\n        this.silent_renew_url = 'https://localhost:44311';\n        this.silent_renew_offset_in_seconds = 0;\n        this.silent_redirect_url = 'https://localhost:44311';\n        this.post_login_route = '/';\n        // HTTP 403\n        this.forbidden_route = '/forbidden';\n        // HTTP 401\n        this.unauthorized_route = '/unauthorized';\n        this.auto_userinfo = true;\n        this.auto_clean_state_after_authentication = true;\n        this.trigger_authorization_result_event = false;\n        this.log_console_warning_active = true;\n        this.log_console_debug_active = false;\n        // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n        // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n        this.max_id_token_iat_offset_allowed_in_seconds = 3;\n        this.storage = typeof Storage !== 'undefined' ? sessionStorage : null;\n    }\n    return DefaultConfiguration;\n}());\nvar OpenIDImplicitFlowConfiguration = /** @class */ /*@__PURE__*/ (function () {\n    function OpenIDImplicitFlowConfiguration() {\n        this.stsServer = 'https://localhost:44318';\n        this.redirect_url = 'https://localhost:44311';\n        this.client_id = 'angularclient';\n        this.response_type = 'id_token token';\n        this.resource = '';\n        this.scope = 'openid email profile';\n        this.hd_param = '';\n        this.post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\n        this.start_checksession = false;\n        this.silent_renew = true;\n        this.silent_renew_url = 'https://localhost:44311';\n        this.silent_renew_offset_in_seconds = 0;\n        this.silent_redirect_url = 'https://localhost:44311';\n        this.post_login_route = '/';\n        this.forbidden_route = '/forbidden';\n        this.unauthorized_route = '/unauthorized';\n        this.auto_userinfo = true;\n        this.auto_clean_state_after_authentication = true;\n        this.trigger_authorization_result_event = false;\n        this.log_console_warning_active = true;\n        this.log_console_debug_active = false;\n        this.max_id_token_iat_offset_allowed_in_seconds = 3;\n        this.storage = sessionStorage;\n    }\n    return OpenIDImplicitFlowConfiguration;\n}());\nvar AuthConfiguration = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} defaultConfig\n     */\n    function AuthConfiguration(defaultConfig) {\n        this.defaultConfig = defaultConfig;\n    }\n    Object.defineProperty(AuthConfiguration.prototype, \"stsServer\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.stsServer;\n            }\n            return this.defaultConfig.stsServer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"redirect_url\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.redirect_url;\n            }\n            return this.defaultConfig.redirect_url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"silent_redirect_url\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.silent_renew_url;\n            }\n            return this.defaultConfig.silent_renew_url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"client_id\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.client_id;\n            }\n            return this.defaultConfig.client_id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"response_type\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.response_type;\n            }\n            return this.defaultConfig.response_type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"scope\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.scope;\n            }\n            return this.defaultConfig.scope;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"hd_param\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.hd_param;\n            }\n            return this.defaultConfig.hd_param;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"post_logout_redirect_uri\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri;\n            }\n            return this.defaultConfig.post_logout_redirect_uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"start_checksession\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.start_checksession;\n            }\n            return this.defaultConfig.start_checksession;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"silent_renew\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.silent_renew;\n            }\n            return this.defaultConfig.silent_renew;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"silent_renew_offset_in_seconds\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds;\n            }\n            return this.defaultConfig.silent_renew_offset_in_seconds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"post_login_route\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.post_login_route;\n            }\n            return this.defaultConfig.post_login_route;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"forbidden_route\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.forbidden_route;\n            }\n            return this.defaultConfig.forbidden_route;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"unauthorized_route\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.unauthorized_route;\n            }\n            return this.defaultConfig.unauthorized_route;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"auto_userinfo\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.auto_userinfo;\n            }\n            return this.defaultConfig.auto_userinfo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"auto_clean_state_after_authentication\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication;\n            }\n            return this.defaultConfig.auto_clean_state_after_authentication;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"trigger_authorization_result_event\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event;\n            }\n            return this.defaultConfig.trigger_authorization_result_event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"log_console_warning_active\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.log_console_warning_active;\n            }\n            return this.defaultConfig.log_console_warning_active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"log_console_debug_active\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.log_console_debug_active;\n            }\n            return this.defaultConfig.log_console_debug_active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"max_id_token_iat_offset_allowed_in_seconds\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds;\n            }\n            return this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AuthConfiguration.prototype, \"storage\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this.openIDImplicitFlowConfiguration) {\n                return this.openIDImplicitFlowConfiguration.storage;\n            }\n            return this.defaultConfig.storage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} openIDImplicitFlowConfiguration\n     * @return {?}\n     */\n    AuthConfiguration.prototype.init = function (openIDImplicitFlowConfiguration) {\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\n    };\n    return AuthConfiguration;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Implement this class-interface to create a custom storage.\n * @abstract\n */\nvar OidcSecurityStorage = /** @class */ /*@__PURE__*/ (function () {\n    function OidcSecurityStorage() {\n    }\n    return OidcSecurityStorage;\n}());\nvar BrowserStorage = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} authConfiguration\n     */\n    function BrowserStorage(authConfiguration) {\n        this.authConfiguration = authConfiguration;\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    BrowserStorage.prototype.read = function (key) {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n        return;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserStorage.prototype.write = function (key, value) {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    };\n    return BrowserStorage;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcSecurityCommon = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} oidcSecurityStorage\n     */\n    function OidcSecurityCommon(oidcSecurityStorage) {\n        this.oidcSecurityStorage = oidcSecurityStorage;\n        this.storage_auth_result = 'authorizationResult';\n        this.storage_access_token = 'authorizationData';\n        this.storage_id_token = 'authorizationDataIdToken';\n        this.storage_is_authorized = '_isAuthorized';\n        this.storage_user_data = 'userData';\n        this.storage_auth_nonce = 'authNonce';\n        this.storage_auth_state_control = 'authStateControl';\n        this.storage_session_state = 'session_state';\n        this.storage_silent_renew_running = 'storage_silent_renew_running';\n        this.storage_custom_request_params = 'storage_custom_request_params';\n    }\n    Object.defineProperty(OidcSecurityCommon.prototype, \"authResult\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_auth_result);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_auth_result, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"accessToken\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_access_token) || '';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_access_token, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"idToken\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_id_token) || '';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_id_token, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"isAuthorized\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_is_authorized);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_is_authorized, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"userData\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_user_data);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_user_data, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"authNonce\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_auth_nonce) || '';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_auth_nonce, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"authStateControl\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_auth_state_control) || '';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_auth_state_control, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"sessionState\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_session_state);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_session_state, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"silentRenewRunning\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_silent_renew_running) || '';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_silent_renew_running, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OidcSecurityCommon.prototype, \"customRequestParams\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.retrieve(this.storage_custom_request_params);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this.store(this.storage_custom_request_params, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    OidcSecurityCommon.prototype.setupModule = function () { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    OidcSecurityCommon.prototype.retrieve = function (key) {\n        return this.oidcSecurityStorage.read(key);\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    OidcSecurityCommon.prototype.store = function (key, value) {\n        this.oidcSecurityStorage.write(key, value);\n    };\n    /**\n     * @param {?} isRenewProcess\n     * @return {?}\n     */\n    OidcSecurityCommon.prototype.resetStorageData = function (isRenewProcess) {\n        if (!isRenewProcess) {\n            this.store(this.storage_auth_result, '');\n            this.store(this.storage_session_state, '');\n            this.store(this.storage_silent_renew_running, '');\n            this.store(this.storage_is_authorized, false);\n            this.store(this.storage_access_token, '');\n            this.store(this.storage_id_token, '');\n            this.store(this.storage_user_data, '');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityCommon.prototype.getAccessToken = function () {\n        return this.retrieve(this.storage_access_token);\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityCommon.prototype.getIdToken = function () {\n        return this.retrieve(this.storage_id_token);\n    };\n    return OidcSecurityCommon;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ArrayHelperService = /** @class */ /*@__PURE__*/ (function () {\n    function ArrayHelperService() {\n    }\n    /**\n     * @param {?} arr1\n     * @param {?} arr2\n     * @return {?}\n     */\n    ArrayHelperService.prototype.arraysEqual = function (arr1, arr2) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n        for (var /** @type {?} */ i = arr1.length; i--;) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ArrayHelperService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TokenHelperService = /** @class */ /*@__PURE__*/ (function () {\n    function TokenHelperService() {\n    }\n    /**\n     * @param {?} dataIdToken\n     * @return {?}\n     */\n    TokenHelperService.prototype.getTokenExpirationDate = function (dataIdToken) {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n        var /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n        return date;\n    };\n    /**\n     * @param {?} token\n     * @param {?} encode\n     * @return {?}\n     */\n    TokenHelperService.prototype.getPayloadFromToken = function (token, encode) {\n        var /** @type {?} */ data = {};\n        if (typeof token !== 'undefined') {\n            var /** @type {?} */ encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n        return data;\n    };\n    /**\n     * @param {?} token\n     * @param {?} encode\n     * @return {?}\n     */\n    TokenHelperService.prototype.getHeaderFromToken = function (token, encode) {\n        var /** @type {?} */ data = {};\n        if (typeof token !== 'undefined') {\n            var /** @type {?} */ encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n        return data;\n    };\n    /**\n     * @param {?} token\n     * @param {?} encode\n     * @return {?}\n     */\n    TokenHelperService.prototype.getSignatureFromToken = function (token, encode) {\n        var /** @type {?} */ data = {};\n        if (typeof token !== 'undefined') {\n            var /** @type {?} */ encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n        return data;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    TokenHelperService.prototype.urlBase64Decode = function (str) {\n        var /** @type {?} */ output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n        return window.atob(output);\n    };\n    return TokenHelperService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LoggerService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} authConfiguration\n     */\n    function LoggerService(authConfiguration) {\n        this.authConfiguration = authConfiguration;\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    LoggerService.prototype.logError = function (message) {\n        console.error(message);\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    LoggerService.prototype.logWarning = function (message) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    LoggerService.prototype.logDebug = function (message) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    };\n    return LoggerService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcSecurityValidation = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} arrayHelperService\n     * @param {?} tokenHelperService\n     * @param {?} loggerService\n     */\n    function OidcSecurityValidation(arrayHelperService, tokenHelperService, loggerService) {\n        this.arrayHelperService = arrayHelperService;\n        this.tokenHelperService = tokenHelperService;\n        this.loggerService = loggerService;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} offsetSeconds\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.isTokenExpired = function (token, offsetSeconds) {\n        var /** @type {?} */ decoded;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\n    };\n    /**\n     * @param {?} decoded_id_token\n     * @param {?=} offsetSeconds\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_id_token_exp_not_expired = function (decoded_id_token, offsetSeconds) {\n        var /** @type {?} */ tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\n        offsetSeconds = offsetSeconds || 0;\n        if (!tokenExpirationDate) {\n            return false;\n        }\n        // Token not expired?\n        return (tokenExpirationDate.valueOf() >\n            new Date().valueOf() + offsetSeconds * 1000);\n    };\n    /**\n     * @param {?} dataIdToken\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_required_id_token = function (dataIdToken) {\n        var /** @type {?} */ validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n        return validated;\n    };\n    /**\n     * @param {?} dataIdToken\n     * @param {?} max_offset_allowed_in_seconds\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_id_token_iat_max_offset = function (dataIdToken, max_offset_allowed_in_seconds) {\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n        var /** @type {?} */ dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\n        if (dateTime_iat_id_token == null) {\n            return false;\n        }\n        this.loggerService.logDebug('validate_id_token_iat_max_offset: ' +\n            (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\n            ' < ' +\n            max_offset_allowed_in_seconds * 1000);\n        return (new Date().valueOf() - dateTime_iat_id_token.valueOf() <\n            max_offset_allowed_in_seconds * 1000);\n    };\n    /**\n     * @param {?} dataIdToken\n     * @param {?} local_nonce\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_id_token_nonce = function (dataIdToken, local_nonce) {\n        if (dataIdToken.nonce !== local_nonce) {\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' +\n                dataIdToken.nonce +\n                ' local_nonce:' +\n                local_nonce);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @param {?} dataIdToken\n     * @param {?} authWellKnownEndpoints_issuer\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_id_token_iss = function (dataIdToken, authWellKnownEndpoints_issuer) {\n        if (((dataIdToken.iss)) !==\n            ((authWellKnownEndpoints_issuer))) {\n            this.loggerService.logDebug('Validate_id_token_iss failed, dataIdToken.iss: ' +\n                dataIdToken.iss +\n                ' authWellKnownEndpoints issuer:' +\n                authWellKnownEndpoints_issuer);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @param {?} dataIdToken\n     * @param {?} aud\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_id_token_aud = function (dataIdToken, aud) {\n        if (dataIdToken.aud instanceof Array) {\n            var /** @type {?} */ result = this.arrayHelperService.arraysEqual(dataIdToken.aud, aud);\n            if (!result) {\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' +\n                    dataIdToken.aud +\n                    ' client_id:' +\n                    aud);\n                return false;\n            }\n            return true;\n        }\n        else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' +\n                dataIdToken.aud +\n                ' client_id:' +\n                aud);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @param {?} state\n     * @param {?} local_state\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validateStateFromHashCallback = function (state, local_state) {\n        if (((state)) !== ((local_state))) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' +\n                state +\n                ' local_state:' +\n                local_state);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @param {?} id_token_sub\n     * @param {?} userdata_sub\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_userdata_sub_id_token = function (id_token_sub, userdata_sub) {\n        if (((id_token_sub)) !== ((userdata_sub))) {\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' +\n                id_token_sub +\n                ' userdata_sub:' +\n                userdata_sub);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @param {?} id_token\n     * @param {?} jwtkeys\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_signature_id_token = function (id_token, jwtkeys) {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n        var /** @type {?} */ header_data = this.tokenHelperService.getHeaderFromToken(id_token, false);\n        if (Object.keys(header_data).length === 0 &&\n            header_data.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n        var /** @type {?} */ kid = header_data.kid;\n        var /** @type {?} */ alg = header_data.alg;\n        if ('RS256' !== ((alg))) {\n            this.loggerService.logWarning('Only RS256 supported');\n            return false;\n        }\n        var /** @type {?} */ isValid = false;\n        if (!header_data.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" use \"sig\"\n            var /** @type {?} */ amountOfMatchingKeys = 0;\n            for (var _i = 0, _a = jwtkeys.keys; _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (((key.kty)) === 'RSA' &&\n                    ((key.use)) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            }\n            else if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            }\n            else {\n                for (var _b = 0, _c = jwtkeys.keys; _b < _c.length; _b++) {\n                    var key = _c[_b];\n                    if (((key.kty)) === 'RSA' &&\n                        ((key.use)) === 'sig') {\n                        var /** @type {?} */ publickey = KEYUTIL.getKey(key);\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\n                            'RS256'\n                        ]);\n                        if (!isValid) {\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                        }\n                        return isValid;\n                    }\n                }\n            }\n        }\n        else {\n            // kid in the Jose header of id_token\n            for (var _d = 0, _e = jwtkeys.keys; _d < _e.length; _d++) {\n                var key = _e[_d];\n                if (((key.kid)) === ((kid))) {\n                    var /** @type {?} */ publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\n                        'RS256'\n                    ]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n        return isValid;\n    };\n    /**\n     * @param {?} response_type\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.config_validate_response_type = function (response_type) {\n        if (response_type === 'id_token token' ||\n            response_type === 'id_token') {\n            return true;\n        }\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + response_type);\n        return false;\n    };\n    /**\n     * @param {?} access_token\n     * @param {?} at_hash\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.validate_id_token_at_hash = function (access_token, at_hash) {\n        this.loggerService.logDebug('From the server:' + at_hash);\n        var /** @type {?} */ testdata = this.generate_at_hash('' + access_token);\n        this.loggerService.logDebug('client validation not decoded:' + testdata);\n        if (testdata === ((at_hash))) {\n            return true; // isValid;\n        }\n        else {\n            var /** @type {?} */ testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === ((at_hash))) {\n                return true; // isValid\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} access_token\n     * @return {?}\n     */\n    OidcSecurityValidation.prototype.generate_at_hash = function (access_token) {\n        var /** @type {?} */ hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\n        var /** @type {?} */ first128bits = hash.substr(0, hash.length / 2);\n        var /** @type {?} */ testdata = hextob64u(first128bits);\n        return testdata;\n    };\n    return OidcSecurityValidation;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar StateValidationService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} authConfiguration\n     * @param {?} oidcSecurityCommon\n     * @param {?} oidcSecurityValidation\n     * @param {?} tokenHelperService\n     * @param {?} loggerService\n     */\n    function StateValidationService(authConfiguration, oidcSecurityCommon, oidcSecurityValidation, tokenHelperService, loggerService) {\n        this.authConfiguration = authConfiguration;\n        this.oidcSecurityCommon = oidcSecurityCommon;\n        this.oidcSecurityValidation = oidcSecurityValidation;\n        this.tokenHelperService = tokenHelperService;\n        this.loggerService = loggerService;\n    }\n    /**\n     * @param {?} authWellKnownEndpoints\n     * @return {?}\n     */\n    StateValidationService.prototype.setupModule = function (authWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    };\n    /**\n     * @param {?} result\n     * @param {?} jwtKeys\n     * @return {?}\n     */\n    StateValidationService.prototype.validateState = function (result, jwtKeys) {\n        var /** @type {?} */ toReturn = new ValidateStateResult('', '', false, {});\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\n        if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\n            this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n            return toReturn;\n        }\n        if (!this.oidcSecurityValidation.validate_id_token_nonce(toReturn.decoded_id_token, this.oidcSecurityCommon.authNonce)) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n        if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\n            this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n            return toReturn;\n        }\n        if (!this.oidcSecurityValidation.validate_id_token_iat_max_offset(toReturn.decoded_id_token, this.authConfiguration\n            .max_id_token_iat_offset_allowed_in_seconds)) {\n            this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n            return toReturn;\n        }\n        if (this.authWellKnownEndpoints) {\n            if (!this.oidcSecurityValidation.validate_id_token_iss(toReturn.decoded_id_token, this.authWellKnownEndpoints.issuer)) {\n                this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                return toReturn;\n            }\n        }\n        else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            return toReturn;\n        }\n        if (!this.oidcSecurityValidation.validate_id_token_aud(toReturn.decoded_id_token, this.authConfiguration.client_id)) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n        if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n        if (!this.oidcSecurityValidation.validate_id_token_at_hash(toReturn.access_token, toReturn.decoded_id_token.at_hash) ||\n            !toReturn.access_token) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            return toReturn;\n        }\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    };\n    /**\n     * @return {?}\n     */\n    StateValidationService.prototype.handleSuccessfulValidation = function () {\n        this.oidcSecurityCommon.authNonce = '';\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    };\n    return StateValidationService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcSecurityCheckSession = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} authConfiguration\n     * @param {?} oidcSecurityCommon\n     * @param {?} loggerService\n     * @param {?} zone\n     */\n    function OidcSecurityCheckSession(authConfiguration, oidcSecurityCommon, loggerService, zone) {\n        this.authConfiguration = authConfiguration;\n        this.oidcSecurityCommon = oidcSecurityCommon;\n        this.loggerService = loggerService;\n        this.zone = zone;\n        this.onCheckSessionChanged = new EventEmitter(true);\n    }\n    /**\n     * @param {?} authWellKnownEndpoints\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.setupModule = function (authWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.doesSessionExist = function () {\n        var /** @type {?} */ existsparent = undefined;\n        try {\n            var /** @type {?} */ parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\n        }\n        catch (e) {\n            // not accessible\n        }\n        var /** @type {?} */ exists = window.document.getElementById('myiFrameForCheckSession');\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        }\n        else if (exists) {\n            this.sessionIframe = exists;\n        }\n        if (existsparent || exists) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.init = function () {\n        var _this = this;\n        this.sessionIframe = window.document.createElement('iframe');\n        this.sessionIframe.id = 'myiFrameForCheckSession';\n        this.loggerService.logDebug(this.sessionIframe);\n        this.sessionIframe.style.display = 'none';\n        window.document.body.appendChild(this.sessionIframe);\n        if (this.authWellKnownEndpoints) {\n            this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\n        }\n        else {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n        }\n        this.iframeMessageEvent = this.messageHandler.bind(this);\n        window.addEventListener('message', this.iframeMessageEvent, false);\n        return Observable.create(function (observer) {\n            _this.sessionIframe.onload = function () {\n                observer.next(_this);\n                observer.complete();\n            };\n        });\n    };\n    /**\n     * @param {?} clientId\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.startCheckingSession = function (clientId) {\n        if (!this._scheduledHeartBeat) {\n            this.pollServerSession(clientId);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.stopCheckingSession = function () {\n        if (this._scheduledHeartBeat) {\n            clearTimeout(this._scheduledHeartBeat);\n            this._scheduledHeartBeat = null;\n        }\n    };\n    /**\n     * @param {?} clientId\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.pollServerSession = function (clientId) {\n        var _this = this;\n        var /** @type {?} */ _pollServerSessionRecur = function () {\n            if (_this.sessionIframe && clientId) {\n                _this.loggerService.logDebug(_this.sessionIframe);\n                var /** @type {?} */ session_state = _this.oidcSecurityCommon.sessionState;\n                if (session_state) {\n                    _this.sessionIframe.contentWindow.postMessage(clientId + ' ' + session_state, _this.authConfiguration.stsServer);\n                }\n            }\n            else {\n                _this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\n                _this.loggerService.logDebug(clientId);\n                _this.loggerService.logDebug(_this.sessionIframe);\n                // this.init();\n            }\n            _this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\n        };\n        this.zone.runOutsideAngular(function () {\n            _this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\n        });\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    OidcSecurityCheckSession.prototype.messageHandler = function (e) {\n        if (this.sessionIframe &&\n            e.origin === this.authConfiguration.stsServer &&\n            e.source === this.sessionIframe.contentWindow) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            }\n            else if (e.data === 'changed') {\n                this.onCheckSessionChanged.emit();\n            }\n            else {\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    };\n    return OidcSecurityCheckSession;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcSecuritySilentRenew = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} loggerService\n     */\n    function OidcSecuritySilentRenew(loggerService) {\n        this.loggerService = loggerService;\n    }\n    /**\n     * @return {?}\n     */\n    OidcSecuritySilentRenew.prototype.initRenew = function () {\n        var /** @type {?} */ existsparent = undefined;\n        try {\n            var /** @type {?} */ parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\n        }\n        catch (e) {\n            // not accessible\n        }\n        var /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        }\n        else if (exists) {\n            this.sessionIframe = exists;\n        }\n        if (!exists && !existsparent) {\n            this.sessionIframe = window.document.createElement('iframe');\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\n            this.loggerService.logDebug(this.sessionIframe);\n            this.sessionIframe.style.display = 'none';\n            window.document.body.appendChild(this.sessionIframe);\n        }\n    };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    OidcSecuritySilentRenew.prototype.startRenew = function (url) {\n        var _this = this;\n        var /** @type {?} */ existsparent = undefined;\n        try {\n            var /** @type {?} */ parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\n        }\n        catch (e) {\n            // not accessible\n        }\n        var /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        }\n        else if (exists) {\n            this.sessionIframe = exists;\n        }\n        this.loggerService.logDebug('startRenew for URL:' + url);\n        this.sessionIframe.src = url;\n        return Observable.create(function (observer) {\n            _this.sessionIframe.onload = function () {\n                observer.next(_this);\n                observer.complete();\n            };\n        });\n    };\n    return OidcSecuritySilentRenew;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcDataService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} httpClient\n     */\n    function OidcDataService(httpClient) {\n        this.httpClient = httpClient;\n    }\n    /**\n     * @template T\n     * @param {?} url\n     * @return {?}\n     */\n    OidcDataService.prototype.getWellknownEndpoints = function (url) {\n        var /** @type {?} */ headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        return this.httpClient.get(url, {\n            headers: headers\n        });\n    };\n    /**\n     * @template T\n     * @param {?} url\n     * @param {?} token\n     * @return {?}\n     */\n    OidcDataService.prototype.getIdentityUserData = function (url, token) {\n        var /** @type {?} */ headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n        return this.httpClient.get(url, {\n            headers: headers\n        });\n    };\n    /**\n     * @template T\n     * @param {?} url\n     * @return {?}\n     */\n    OidcDataService.prototype.get = function (url) {\n        var /** @type {?} */ headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        return this.httpClient.get(url, {\n            headers: headers\n        });\n    };\n    return OidcDataService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcSecurityUserService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} oidcDataService\n     * @param {?} oidcSecurityCommon\n     * @param {?} loggerService\n     */\n    function OidcSecurityUserService(oidcDataService, oidcSecurityCommon, loggerService) {\n        this.oidcDataService = oidcDataService;\n        this.oidcSecurityCommon = oidcSecurityCommon;\n        this.loggerService = loggerService;\n        this.userData = '';\n    }\n    /**\n     * @param {?} authWellKnownEndpoints\n     * @return {?}\n     */\n    OidcSecurityUserService.prototype.setupModule = function (authWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityUserService.prototype.initUserData = function () {\n        var _this = this;\n        return this.getIdentityUserData().pipe(map(function (data) { return (_this.userData = data); }));\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityUserService.prototype.getUserData = function () {\n        if (!this.userData) {\n            throw Error('UserData is not set!');\n        }\n        return this.userData;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    OidcSecurityUserService.prototype.setUserData = function (value) {\n        this.userData = value;\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityUserService.prototype.getIdentityUserData = function () {\n        var /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\n        if (this.authWellKnownEndpoints) {\n            return this.oidcDataService.getIdentityUserData(this.authWellKnownEndpoints.userinfo_endpoint, token);\n        }\n        else {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n        }\n        return this.oidcDataService.getIdentityUserData('undefined', token);\n    };\n    return OidcSecurityUserService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar UriEncoder = /** @class */ /*@__PURE__*/ (function () {\n    function UriEncoder() {\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    UriEncoder.prototype.encodeKey = function (key) {\n        return encodeURIComponent(key);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    UriEncoder.prototype.encodeValue = function (value) {\n        return encodeURIComponent(value);\n    };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    UriEncoder.prototype.decodeKey = function (key) {\n        return decodeURIComponent(key);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    UriEncoder.prototype.decodeValue = function (value) {\n        return decodeURIComponent(value);\n    };\n    return UriEncoder;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OidcSecurityService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} platformId\n     * @param {?} oidcDataService\n     * @param {?} stateValidationService\n     * @param {?} authConfiguration\n     * @param {?} router\n     * @param {?} oidcSecurityCheckSession\n     * @param {?} oidcSecuritySilentRenew\n     * @param {?} oidcSecurityUserService\n     * @param {?} oidcSecurityCommon\n     * @param {?} oidcSecurityValidation\n     * @param {?} tokenHelperService\n     * @param {?} loggerService\n     * @param {?} zone\n     */\n    function OidcSecurityService(platformId, oidcDataService, stateValidationService, authConfiguration, router, oidcSecurityCheckSession, oidcSecuritySilentRenew, oidcSecurityUserService, oidcSecurityCommon, oidcSecurityValidation, tokenHelperService, loggerService, zone) {\n        this.platformId = platformId;\n        this.oidcDataService = oidcDataService;\n        this.stateValidationService = stateValidationService;\n        this.authConfiguration = authConfiguration;\n        this.router = router;\n        this.oidcSecurityCheckSession = oidcSecurityCheckSession;\n        this.oidcSecuritySilentRenew = oidcSecuritySilentRenew;\n        this.oidcSecurityUserService = oidcSecurityUserService;\n        this.oidcSecurityCommon = oidcSecurityCommon;\n        this.oidcSecurityValidation = oidcSecurityValidation;\n        this.tokenHelperService = tokenHelperService;\n        this.loggerService = loggerService;\n        this.zone = zone;\n        this.onModuleSetup = new EventEmitter();\n        this.onAuthorizationResult = new EventEmitter();\n        this.onCheckSessionChanged = new EventEmitter();\n        this.checkSessionChanged = false;\n        this.moduleSetup = false;\n        this._isAuthorized = new BehaviorSubject(false);\n        this._isAuthorizedValue = false;\n        this._userData = new BehaviorSubject('');\n        this.authWellKnownEndpointsLoaded = false;\n        this.runTokenValidationRunning = false;\n    }\n    /**\n     * @param {?} openIDImplicitFlowConfiguration\n     * @param {?} authWellKnownEndpoints\n     * @return {?}\n     */\n    OidcSecurityService.prototype.setupModule = function (openIDImplicitFlowConfiguration, authWellKnownEndpoints) {\n        var _this = this;\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(function () {\n            _this.loggerService.logDebug('onCheckSessionChanged');\n            _this.checkSessionChanged = true;\n            _this.onCheckSessionChanged.emit(_this.checkSessionChanged);\n        });\n        this._userData.subscribe(function () {\n            _this.onUserDataChanged();\n        });\n        var /** @type {?} */ userData = this.oidcSecurityCommon.userData;\n        if (userData) {\n            this.setUserData(userData);\n        }\n        var /** @type {?} */ isAuthorized = this.oidcSecurityCommon.isAuthorized;\n        if (isAuthorized) {\n            this.loggerService.logDebug('IsAuthorized setup module');\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\n            if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.idToken, this.authConfiguration.silent_renew_offset_in_seconds)) {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\n            }\n            else {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\n                this.setIsAuthorized(isAuthorized);\n                this.runTokenValidation();\n            }\n        }\n        this.loggerService.logDebug('STS server: ' + this.authConfiguration.stsServer);\n        if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            this.moduleSetup = true;\n            this.onModuleSetup.emit();\n            if (this.authConfiguration.silent_renew) {\n                this.oidcSecuritySilentRenew.initRenew();\n                // Support authorization via DOM events.\n                // Deregister if OidcSecurityService.setupModule is called again by any instance.\n                //      We only ever want the latest setup service to be reacting to this event.\n                this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\n                var /** @type {?} */ instanceId_1 = Math.random();\n                var /** @type {?} */ boundSilentRenewInitEvent_1 = (function (e) {\n                    if (e.detail !== instanceId_1) {\n                        window.removeEventListener('oidc-silent-renew-message', _this.boundSilentRenewEvent);\n                        window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent_1);\n                    }\n                }).bind(this);\n                window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent_1, false);\n                window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\n                window.dispatchEvent(new CustomEvent('oidc-silent-renew-init', { detail: instanceId_1 }));\n            }\n            if (this.authConfiguration.start_checksession &&\n                !this.oidcSecurityCheckSession.doesSessionExist()) {\n                this.oidcSecurityCheckSession.init().subscribe(function () {\n                    _this.oidcSecurityCheckSession.pollServerSession(_this.authConfiguration.client_id);\n                });\n            }\n        }\n        else {\n            this.moduleSetup = true;\n            this.onModuleSetup.emit();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getUserData = function () {\n        return this._userData.asObservable();\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getIsAuthorized = function () {\n        return this._isAuthorized.asObservable();\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getToken = function () {\n        if (!this._isAuthorizedValue) {\n            return '';\n        }\n        var /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\n        return decodeURIComponent(token);\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getIdToken = function () {\n        if (!this._isAuthorizedValue) {\n            return '';\n        }\n        var /** @type {?} */ token = this.oidcSecurityCommon.getIdToken();\n        return decodeURIComponent(token);\n    };\n    /**\n     * @param {?=} encode\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getPayloadFromIdToken = function (encode) {\n        if (encode === void 0) {\n            encode = false;\n        }\n        var /** @type {?} */ token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    };\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    OidcSecurityService.prototype.setState = function (state) {\n        this.oidcSecurityCommon.authStateControl = state;\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getState = function () {\n        return this.oidcSecurityCommon.authStateControl;\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    OidcSecurityService.prototype.setCustomRequestParameters = function (params) {\n        this.oidcSecurityCommon.customRequestParams = params;\n    };\n    /**\n     * @param {?=} urlHandler\n     * @return {?}\n     */\n    OidcSecurityService.prototype.authorize = function (urlHandler) {\n        if (this.authWellKnownEndpoints) {\n            this.authWellKnownEndpointsLoaded = true;\n        }\n        if (!this.authWellKnownEndpointsLoaded) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\n            // invalid response_type\n            return;\n        }\n        this.resetAuthorizationData(false);\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\n        var /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\n        if (!state) {\n            state = Date.now() + '' + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n        var /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('AuthorizedController created. local state: ' +\n            this.oidcSecurityCommon.authStateControl);\n        if (this.authWellKnownEndpoints) {\n            var /** @type {?} */ url = this.createAuthorizeUrl(this.authConfiguration.redirect_url, nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n            if (urlHandler) {\n                urlHandler(url);\n            }\n            else {\n                window.location.href = url;\n            }\n        }\n        else {\n            this.loggerService.logError('authWellKnownEndpoints is undefined');\n        }\n    };\n    /**\n     * @param {?=} hash\n     * @return {?}\n     */\n    OidcSecurityService.prototype.authorizedCallback = function (hash) {\n        var _this = this;\n        var /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        var /** @type {?} */ isRenewProcess = silentRenew === 'running';\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n        hash = hash || window.location.hash.substr(1);\n        var /** @type {?} */ result = hash\n            .split('&')\n            .reduce(function (resultData, item) {\n            var /** @type {?} */ parts = item.split('=');\n            resultData[parts[0]] = parts[1];\n            return resultData;\n        }, {});\n        this.oidcSecurityCommon.authResult = result;\n        this.loggerService.logDebug(result);\n        this.loggerService.logDebug('authorizedCallback created, begin token validation');\n        this.getSigningKeys().subscribe(function (jwtKeys) {\n            var /** @type {?} */ validationResult = _this.getValidatedStateResult(result, jwtKeys);\n            if (validationResult.authResponseIsValid) {\n                _this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\n                _this.oidcSecurityCommon.silentRenewRunning = '';\n                if (_this.authConfiguration.auto_userinfo) {\n                    _this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(function (response) {\n                        if (response) {\n                            _this.onAuthorizationResult.emit(AuthorizationResult.authorized);\n                            if (!_this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                _this.router.navigate([\n                                    _this.authConfiguration.post_login_route\n                                ]);\n                            }\n                        }\n                        else {\n                            _this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n                            if (!_this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                _this.router.navigate([\n                                    _this.authConfiguration.unauthorized_route\n                                ]);\n                            }\n                        }\n                    });\n                }\n                else {\n                    if (!isRenewProcess) {\n                        // userData is set to the id_token decoded, auto get user data set to false\n                        _this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\n                        _this.setUserData(_this.oidcSecurityUserService.getUserData());\n                        _this.runTokenValidation();\n                    }\n                    _this.onAuthorizationResult.emit(AuthorizationResult.authorized);\n                    if (!_this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                        _this.router.navigate([\n                            _this.authConfiguration.post_login_route\n                        ]);\n                    }\n                }\n            }\n            else {\n                // something went wrong\n                _this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\n                _this.loggerService.logWarning(window.location.hash);\n                _this.resetAuthorizationData(false);\n                _this.oidcSecurityCommon.silentRenewRunning = '';\n                _this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n                if (!_this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                    _this.router.navigate([\n                        _this.authConfiguration.unauthorized_route\n                    ]);\n                }\n            }\n        }, function (err) {\n            /* Something went wrong while getting signing key */\n            _this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\n            _this.oidcSecurityCommon.silentRenewRunning = '';\n        });\n    };\n    /**\n     * @param {?=} isRenewProcess\n     * @param {?=} result\n     * @param {?=} id_token\n     * @param {?=} decoded_id_token\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getUserinfo = function (isRenewProcess, result, id_token, decoded_id_token) {\n        var _this = this;\n        if (isRenewProcess === void 0) {\n            isRenewProcess = false;\n        }\n        result = result ? result : this.oidcSecurityCommon.authResult;\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\n        decoded_id_token = decoded_id_token\n            ? decoded_id_token\n            : this.tokenHelperService.getPayloadFromToken(id_token, false);\n        return new Observable(function (observer) {\n            // flow id_token token\n            if (_this.authConfiguration.response_type === 'id_token token') {\n                if (isRenewProcess) {\n                    _this.oidcSecurityCommon.sessionState = result.session_state;\n                    observer.next(true);\n                    observer.complete();\n                }\n                else {\n                    _this.oidcSecurityUserService\n                        .initUserData()\n                        .subscribe(function () {\n                        _this.loggerService.logDebug('authorizedCallback id_token token flow');\n                        var /** @type {?} */ userData = _this.oidcSecurityUserService.getUserData();\n                        if (_this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\n                            _this.setUserData(userData);\n                            _this.loggerService.logDebug(_this.oidcSecurityCommon.accessToken);\n                            _this.loggerService.logDebug(_this.oidcSecurityUserService.getUserData());\n                            _this.oidcSecurityCommon.sessionState =\n                                result.session_state;\n                            _this.runTokenValidation();\n                            observer.next(true);\n                        }\n                        else {\n                            // something went wrong, userdata sub does not match that from id_token\n                            _this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                            _this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                            _this.resetAuthorizationData(false);\n                            observer.next(false);\n                        }\n                        observer.complete();\n                    });\n                }\n            }\n            else {\n                // flow id_token\n                _this.loggerService.logDebug('authorizedCallback id_token flow');\n                _this.loggerService.logDebug(_this.oidcSecurityCommon.accessToken);\n                // userData is set to the id_token decoded. No access_token.\n                _this.oidcSecurityUserService.setUserData(decoded_id_token);\n                _this.setUserData(_this.oidcSecurityUserService.getUserData());\n                _this.oidcSecurityCommon.sessionState = result.session_state;\n                if (!isRenewProcess) {\n                    _this.runTokenValidation();\n                }\n                observer.next(true);\n                observer.complete();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.logoff = function () {\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\n        if (this.authWellKnownEndpoints) {\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\n                var /** @type {?} */ end_session_endpoint = this.authWellKnownEndpoints\n                    .end_session_endpoint;\n                var /** @type {?} */ id_token_hint = this.oidcSecurityCommon.idToken;\n                var /** @type {?} */ url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n                this.resetAuthorizationData(false);\n                if (this.authConfiguration.start_checksession &&\n                    this.checkSessionChanged) {\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\n                }\n                else {\n                    window.location.href = url;\n                }\n            }\n            else {\n                this.resetAuthorizationData(false);\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            }\n        }\n        else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.refreshSession = function () {\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\n        var /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\n        if (state === '' || state === null) {\n            state = Date.now() + '' + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n        var /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' +\n            this.oidcSecurityCommon.authStateControl);\n        var /** @type {?} */ url = '';\n        if (this.authWellKnownEndpoints) {\n            url = this.createAuthorizeUrl(this.authConfiguration.silent_redirect_url, nonce, state, this.authWellKnownEndpoints.authorization_endpoint, 'none');\n        }\n        else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        }\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\n        return this.oidcSecuritySilentRenew.startRenew(url);\n    };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    OidcSecurityService.prototype.handleError = function (error) {\n        this.loggerService.logError(error);\n        if (error.status === 403 || error.status === '403') {\n            if (this.authConfiguration.trigger_authorization_result_event) {\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n            }\n            else {\n                this.router.navigate([this.authConfiguration.forbidden_route]);\n            }\n        }\n        else if (error.status === 401 || error.status === '401') {\n            var /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n            this.resetAuthorizationData(!!silentRenew);\n            if (this.authConfiguration.trigger_authorization_result_event) {\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n            }\n            else {\n                this.router.navigate([\n                    this.authConfiguration.unauthorized_route\n                ]);\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.startCheckingSilentRenew = function () {\n        this.runTokenValidation();\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.stopCheckingSilentRenew = function () {\n        if (this._scheduledHeartBeat) {\n            clearTimeout(this._scheduledHeartBeat);\n            this._scheduledHeartBeat = null;\n            this.runTokenValidationRunning = false;\n        }\n    };\n    /**\n     * @param {?} result\n     * @param {?} jwtKeys\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getValidatedStateResult = function (result, jwtKeys) {\n        if (result.error) {\n            return new ValidateStateResult('', '', false, {});\n        }\n        return this.stateValidationService.validateState(result, jwtKeys);\n    };\n    /**\n     * @param {?} userData\n     * @return {?}\n     */\n    OidcSecurityService.prototype.setUserData = function (userData) {\n        this.oidcSecurityCommon.userData = userData;\n        this._userData.next(userData);\n    };\n    /**\n     * @param {?} isAuthorized\n     * @return {?}\n     */\n    OidcSecurityService.prototype.setIsAuthorized = function (isAuthorized) {\n        this._isAuthorizedValue = isAuthorized;\n        this._isAuthorized.next(isAuthorized);\n    };\n    /**\n     * @param {?} access_token\n     * @param {?} id_token\n     * @return {?}\n     */\n    OidcSecurityService.prototype.setAuthorizationData = function (access_token, id_token) {\n        if (this.oidcSecurityCommon.accessToken !== '') {\n            this.oidcSecurityCommon.accessToken = '';\n        }\n        this.loggerService.logDebug(access_token);\n        this.loggerService.logDebug(id_token);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n        this.oidcSecurityCommon.accessToken = access_token;\n        this.oidcSecurityCommon.idToken = id_token;\n        this.setIsAuthorized(true);\n        this.oidcSecurityCommon.isAuthorized = true;\n    };\n    /**\n     * @param {?} redirect_url\n     * @param {?} nonce\n     * @param {?} state\n     * @param {?} authorization_endpoint\n     * @param {?=} prompt\n     * @return {?}\n     */\n    OidcSecurityService.prototype.createAuthorizeUrl = function (redirect_url, nonce, state, authorization_endpoint, prompt) {\n        var /** @type {?} */ urlParts = authorization_endpoint.split('?');\n        var /** @type {?} */ authorizationUrl = urlParts[0];\n        var /** @type {?} */ params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder()\n        });\n        params = params.set('client_id', this.authConfiguration.client_id);\n        params = params.append('redirect_uri', redirect_url);\n        params = params.append('response_type', this.authConfiguration.response_type);\n        params = params.append('scope', this.authConfiguration.scope);\n        params = params.append('nonce', nonce);\n        params = params.append('state', state);\n        if (prompt) {\n            params = params.append('prompt', prompt);\n        }\n        if (this.authConfiguration.hd_param) {\n            params = params.append('hd', this.authConfiguration.hd_param);\n        }\n        var /** @type {?} */ customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\n        Object.keys(customParams).forEach(function (key) {\n            params = params.append(key, customParams[key].toString());\n        });\n        return authorizationUrl + \"?\" + params;\n    };\n    /**\n     * @param {?} end_session_endpoint\n     * @param {?} id_token_hint\n     * @return {?}\n     */\n    OidcSecurityService.prototype.createEndSessionUrl = function (end_session_endpoint, id_token_hint) {\n        var /** @type {?} */ urlParts = end_session_endpoint.split('?');\n        var /** @type {?} */ authorizationEndsessionUrl = urlParts[0];\n        var /** @type {?} */ params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder()\n        });\n        params = params.set('id_token_hint', id_token_hint);\n        params = params.append('post_logout_redirect_uri', this.authConfiguration.post_logout_redirect_uri);\n        return authorizationEndsessionUrl + \"?\" + params;\n    };\n    /**\n     * @param {?} isRenewProcess\n     * @return {?}\n     */\n    OidcSecurityService.prototype.resetAuthorizationData = function (isRenewProcess) {\n        if (!isRenewProcess) {\n            if (this.authConfiguration.auto_userinfo) {\n                // Clear user data. Fixes #97.\n                this.setUserData('');\n            }\n            this.setIsAuthorized(false);\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n            this.checkSessionChanged = false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.onUserDataChanged = function () {\n        this.loggerService.logDebug(\"onUserDataChanged: last = \" + this.lastUserData + \", new = \" + this._userData.value);\n        if (this.lastUserData && !this._userData.value) {\n            this.loggerService.logDebug('onUserDataChanged: Logout detected.');\n            // TODO should we have an action here\n        }\n        this.lastUserData = this._userData.value;\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.getSigningKeys = function () {\n        if (this.authWellKnownEndpoints) {\n            this.loggerService.logDebug('jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri);\n            return this.oidcDataService\n                .get(this.authWellKnownEndpoints.jwks_uri)\n                .pipe(catchError(this.handleErrorGetSigningKeys));\n        }\n        else {\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\n        }\n        return this.oidcDataService\n            .get('undefined')\n            .pipe(catchError(this.handleErrorGetSigningKeys));\n    };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    OidcSecurityService.prototype.handleErrorGetSigningKeys = function (error) {\n        var /** @type {?} */ errMsg;\n        if (error instanceof Response) {\n            var /** @type {?} */ body = error.json() || {};\n            var /** @type {?} */ err = JSON.stringify(body);\n            errMsg = error.status + \" - \" + (error.statusText || '') + \" \" + err;\n        }\n        else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return throwError(errMsg);\n    };\n    /**\n     * @return {?}\n     */\n    OidcSecurityService.prototype.runTokenValidation = function () {\n        var _this = this;\n        if (this.runTokenValidationRunning) {\n            return;\n        }\n        this.runTokenValidationRunning = true;\n        /**\n         * First time: delay 10 seconds to call silentRenewHeartBeatCheck\n         * Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\n         */\n        var /** @type {?} */ silentRenewHeartBeatCheck = function () {\n            if (_this._userData.value && (_this.oidcSecurityCommon.silentRenewRunning !== 'running') && _this.getIdToken()) {\n                if (_this.oidcSecurityValidation.isTokenExpired(_this.oidcSecurityCommon.idToken, _this.authConfiguration.silent_renew_offset_in_seconds)) {\n                    _this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\n                    if (_this.authConfiguration.silent_renew) {\n                        _this.refreshSession().subscribe(function () {\n                            _this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                        }, function (err) {\n                            _this.loggerService.logError('Error: ' + err);\n                            _this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                        });\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\n                                                We don't want to schedule another check so we have to return here */\n                        return;\n                    }\n                    else {\n                        _this.resetAuthorizationData(false);\n                    }\n                }\n            }\n            /* Delay 3 seconds and do the next check */\n            _this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n        };\n        this.zone.runOutsideAngular(function () {\n            /* Initial heartbeat check */\n            _this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\n        });\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    OidcSecurityService.prototype.silentRenewEventHandler = function (e) {\n        this.loggerService.logDebug('silentRenewEventHandler');\n        this.authorizedCallback(e.detail);\n    };\n    return OidcSecurityService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AuthWellKnownEndpoints = /** @class */ /*@__PURE__*/ (function () {\n    function AuthWellKnownEndpoints() {\n        this.issuer = '';\n        this.jwks_uri = '';\n        this.authorization_endpoint = '';\n        this.token_endpoint = '';\n        this.userinfo_endpoint = '';\n        this.end_session_endpoint = '';\n        this.check_session_iframe = '';\n        this.revocation_endpoint = '';\n        this.introspection_endpoint = '';\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    AuthWellKnownEndpoints.prototype.setWellKnownEndpoints = function (data) {\n        this.issuer = data.issuer;\n        this.jwks_uri = data.jwks_uri;\n        this.authorization_endpoint = data.authorization_endpoint;\n        this.token_endpoint = data.token_endpoint;\n        this.userinfo_endpoint = data.userinfo_endpoint;\n        if (data.end_session_endpoint) {\n            this.end_session_endpoint = data.end_session_endpoint;\n        }\n        if (data.check_session_iframe) {\n            this.check_session_iframe = data.check_session_iframe;\n        }\n        if (data.revocation_endpoint) {\n            this.revocation_endpoint = data.revocation_endpoint;\n        }\n        if (data.introspection_endpoint) {\n            this.introspection_endpoint = data.introspection_endpoint;\n        }\n    };\n    return AuthWellKnownEndpoints;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar JwtKeys = /** @class */ /*@__PURE__*/ (function () {\n    function JwtKeys() {\n        this.keys = [];\n    }\n    return JwtKeys;\n}());\nvar JwtKey = /** @class */ /*@__PURE__*/ (function () {\n    function JwtKey() {\n        this.kty = '';\n        this.use = '';\n        this.kid = '';\n        this.x5t = '';\n        this.e = '';\n        this.n = '';\n        this.x5c = [];\n    }\n    return JwtKey;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AuthModule = /** @class */ /*@__PURE__*/ (function () {\n    function AuthModule() {\n    }\n    /**\n     * @param {?=} token\n     * @return {?}\n     */\n    AuthModule.forRoot = function (token) {\n        if (token === void 0) {\n            token = {};\n        }\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                TokenHelperService,\n                LoggerService,\n                DefaultConfiguration,\n                ArrayHelperService,\n                AuthWellKnownEndpoints,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    };\n    return AuthModule;\n}());\n/**\n * @record\n * @template T\n */\n/**\n * @record\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Public classes.\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular OpenID Connect Implicit Flow.\n * OpenID Connect Implicit Flow RP Client\n * Written by Damien Bowden.\n * MIT license.\n * https://github.com/damienbod/angular-auth-oidc-client\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { OidcConfigService, OidcSecurityService, OidcSecurityStorage, BrowserStorage, AuthWellKnownEndpoints, AuthorizationResult, JwtKeys, JwtKey, ValidateStateResult, DefaultConfiguration, OpenIDImplicitFlowConfiguration, AuthConfiguration, AuthModule, OidcSecurityValidation, ArrayHelperService as ɵd, OidcDataService as ɵa, StateValidationService as ɵb, TokenHelperService as ɵe, LoggerService as ɵf, OidcSecurityCheckSession as ɵg, OidcSecurityCommon as ɵc, OidcSecuritySilentRenew as ɵh, OidcSecurityUserService as ɵi };\n//# sourceMappingURL=angular-auth-oidc-client.es5.js.map\n",null]}