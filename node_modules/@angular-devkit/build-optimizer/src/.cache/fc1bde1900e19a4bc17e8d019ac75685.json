{"remainingRequest":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\peity\\jquery.peity.js","dependencies":[{"path":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\peity\\jquery.peity.js","mtime":1516281761000},{"path":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533286963592},{"path":"D:\\project\\Apps\\Medcall\\Medcall_Final\\Final Files\\dashboard\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["// Peity jQuery plugin version 3.3.0\n// (c) 2018 Ben Pickles\n//\n// http://benpickles.github.io/peity\n//\n// Released under MIT license.\n(function($, document, Math, undefined) {\n  var peity = $.fn.peity = function(type, options) {\n    if (svgSupported) {\n      this.each(function() {\n        var $this = $(this)\n        var chart = $this.data('_peity')\n\n        if (chart) {\n          if (type) chart.type = type\n          $.extend(chart.opts, options)\n        } else {\n          chart = new Peity(\n            $this,\n            type,\n            $.extend({},\n              peity.defaults[type],\n              $this.data('peity'),\n              options)\n          )\n\n          $this\n            .change(function() { chart.draw() })\n            .data('_peity', chart)\n        }\n\n        chart.draw()\n      });\n    }\n\n    return this;\n  };\n\n  var Peity = function($el, type, opts) {\n    this.$el = $el\n    this.type = type\n    this.opts = opts\n  }\n\n  var PeityPrototype = Peity.prototype\n\n  var svgElement = PeityPrototype.svgElement = function(tag, attrs) {\n    return $(\n      document.createElementNS('http://www.w3.org/2000/svg', tag)\n    ).attr(attrs)\n  }\n\n  // https://gist.github.com/madrobby/3201472\n  var svgSupported = 'createElementNS' in document && svgElement('svg', {})[0].createSVGRect\n\n  PeityPrototype.draw = function() {\n    var opts = this.opts\n    peity.graphers[this.type].call(this, opts)\n    if (opts.after) opts.after.call(this, opts)\n  }\n\n  PeityPrototype.fill = function() {\n    var fill = this.opts.fill\n\n    return $.isFunction(fill)\n      ? fill\n      : function(_, i) { return fill[i % fill.length] }\n  }\n\n  PeityPrototype.prepare = function(width, height) {\n    if (!this.$svg) {\n      this.$el.hide().after(\n        this.$svg = svgElement('svg', {\n          \"class\": \"peity\"\n        })\n      )\n    }\n\n    return this.$svg\n      .empty()\n      .data('_peity', this)\n      .attr({\n        height: height,\n        width: width\n      })\n  }\n\n  PeityPrototype.values = function() {\n    return $.map(this.$el.text().split(this.opts.delimiter), function(value) {\n      return parseFloat(value)\n    })\n  }\n\n  peity.defaults = {}\n  peity.graphers = {}\n\n  peity.register = function(type, defaults, grapher) {\n    this.defaults[type] = defaults\n    this.graphers[type] = grapher\n  }\n\n  peity.register(\n    'pie',\n    {\n      fill: ['#ff9900', '#fff4dd', '#ffc66e'],\n      radius: 8\n    },\n    function(opts) {\n      if (!opts.delimiter) {\n        var delimiter = this.$el.text().match(/[^0-9\\.]/)\n        opts.delimiter = delimiter ? delimiter[0] : \",\"\n      }\n\n      var values = $.map(this.values(), function(n) {\n        return n > 0 ? n : 0\n      })\n\n      if (opts.delimiter == \"/\") {\n        var v1 = values[0]\n        var v2 = values[1]\n        values = [v1, Math.max(0, v2 - v1)]\n      }\n\n      var i = 0\n      var length = values.length\n      var sum = 0\n\n      for (; i < length; i++) {\n        sum += values[i]\n      }\n\n      if (!sum) {\n        length = 2\n        sum = 1\n        values = [0, 1]\n      }\n\n      var diameter = opts.radius * 2\n\n      var $svg = this.prepare(\n        opts.width || diameter,\n        opts.height || diameter\n      )\n\n      var width = $svg.width()\n        , height = $svg.height()\n        , cx = width / 2\n        , cy = height / 2\n\n      var radius = Math.min(cx, cy)\n        , innerRadius = opts.innerRadius\n\n      if (this.type == 'donut' && !innerRadius) {\n        innerRadius = radius * 0.5\n      }\n\n      var pi = Math.PI\n      var fill = this.fill()\n\n      var scale = this.scale = function(value, radius) {\n        var radians = value / sum * pi * 2 - pi / 2\n\n        return [\n          radius * Math.cos(radians) + cx,\n          radius * Math.sin(radians) + cy\n        ]\n      }\n\n      var cumulative = 0\n\n      for (i = 0; i < length; i++) {\n        var value = values[i]\n          , portion = value / sum\n          , $node\n\n        if (portion == 0) continue\n\n        if (portion == 1) {\n          if (innerRadius) {\n            var x2 = cx - 0.01\n              , y1 = cy - radius\n              , y2 = cy - innerRadius\n\n            $node = svgElement('path', {\n              d: [\n                'M', cx, y1,\n                'A', radius, radius, 0, 1, 1, x2, y1,\n                'L', x2, y2,\n                'A', innerRadius, innerRadius, 0, 1, 0, cx, y2\n              ].join(' '),\n              'data-value': value,\n            })\n          } else {\n            $node = svgElement('circle', {\n              cx: cx,\n              cy: cy,\n              'data-value': value,\n              r: radius\n            })\n          }\n        } else {\n          var cumulativePlusValue = cumulative + value\n\n          var d = ['M'].concat(\n            scale(cumulative, radius),\n            'A', radius, radius, 0, portion > 0.5 ? 1 : 0, 1,\n            scale(cumulativePlusValue, radius),\n            'L'\n          )\n\n          if (innerRadius) {\n            d = d.concat(\n              scale(cumulativePlusValue, innerRadius),\n              'A', innerRadius, innerRadius, 0, portion > 0.5 ? 1 : 0, 0,\n              scale(cumulative, innerRadius)\n            )\n          } else {\n            d.push(cx, cy)\n          }\n\n          cumulative += value\n\n          $node = svgElement('path', {\n            d: d.join(\" \"),\n            'data-value': value,\n          })\n        }\n\n        $node.attr('fill', fill.call(this, value, i, values))\n\n        $svg.append($node)\n      }\n    }\n  )\n\n  peity.register(\n    'donut',\n    $.extend(true, {}, peity.defaults.pie),\n    function(opts) {\n      peity.graphers.pie.call(this, opts)\n    }\n  )\n\n  peity.register(\n    \"line\",\n    {\n      delimiter: \",\",\n      fill: \"#c6d9fd\",\n      height: 16,\n      min: 0,\n      stroke: \"#4d89f9\",\n      strokeWidth: 1,\n      width: 32\n    },\n    function(opts) {\n      var values = this.values()\n      if (values.length == 1) values.push(values[0])\n      var max = Math.max.apply(Math, opts.max == undefined ? values : values.concat(opts.max))\n        , min = Math.min.apply(Math, opts.min == undefined ? values : values.concat(opts.min))\n\n      var $svg = this.prepare(opts.width, opts.height)\n        , strokeWidth = opts.strokeWidth\n        , width = $svg.width()\n        , height = $svg.height() - strokeWidth\n        , diff = max - min\n\n      var xScale = this.x = function(input) {\n        return input * (width / (values.length - 1))\n      }\n\n      var yScale = this.y = function(input) {\n        var y = height\n\n        if (diff) {\n          y -= ((input - min) / diff) * height\n        }\n\n        return y + strokeWidth / 2\n      }\n\n      var zero = yScale(Math.max(min, 0))\n        , coords = [0, zero]\n\n      for (var i = 0; i < values.length; i++) {\n        coords.push(\n          xScale(i),\n          yScale(values[i])\n        )\n      }\n\n      coords.push(width, zero)\n\n      if (opts.fill) {\n        $svg.append(\n          svgElement('polygon', {\n            fill: opts.fill,\n            points: coords.join(' ')\n          })\n        )\n      }\n\n      if (strokeWidth) {\n        $svg.append(\n          svgElement('polyline', {\n            fill: 'none',\n            points: coords.slice(2, coords.length - 2).join(' '),\n            stroke: opts.stroke,\n            'stroke-width': strokeWidth,\n            'stroke-linecap': 'square'\n          })\n        )\n      }\n    }\n  );\n\n  peity.register(\n    'bar',\n    {\n      delimiter: \",\",\n      fill: [\"#4D89F9\"],\n      height: 16,\n      min: 0,\n      padding: 0.1,\n      width: 32\n    },\n    function(opts) {\n      var values = this.values()\n        , max = Math.max.apply(Math, opts.max == undefined ? values : values.concat(opts.max))\n        , min = Math.min.apply(Math, opts.min == undefined ? values : values.concat(opts.min))\n\n      var $svg = this.prepare(opts.width, opts.height)\n        , width = $svg.width()\n        , height = $svg.height()\n        , diff = max - min\n        , padding = opts.padding\n        , fill = this.fill()\n\n      var xScale = this.x = function(input) {\n        return input * width / values.length\n      }\n\n      var yScale = this.y = function(input) {\n        return height - (\n          diff\n            ? ((input - min) / diff) * height\n            : 1\n        )\n      }\n\n      for (var i = 0; i < values.length; i++) {\n        var x = xScale(i + padding)\n          , w = xScale(i + 1 - padding) - x\n          , value = values[i]\n          , valueY = yScale(value)\n          , y1 = valueY\n          , y2 = valueY\n          , h\n\n        if (!diff) {\n          h = 1\n        } else if (value < 0) {\n          y1 = yScale(Math.min(max, 0))\n        } else {\n          y2 = yScale(Math.max(min, 0))\n        }\n\n        h = y2 - y1\n\n        if (h == 0) {\n          h = 1\n          if (max > 0 && diff) y1--\n        }\n\n        $svg.append(\n          svgElement('rect', {\n            'data-value': value,\n            fill: fill.call(this, value, i, values),\n            x: x,\n            y: y1,\n            width: w,\n            height: h\n          })\n        )\n      }\n    }\n  );\n})(jQuery, document, Math);\n",null]}