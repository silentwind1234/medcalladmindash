{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../../src/services/oidc.security.service.ts","../../src/models/auth.well-known-endpoints.ts","../../src/models/jwtkeys.ts","../../src/modules/auth.module.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc-array-helper.service.ts","../../src/services/oidc-token-helper.service.ts","../../src/services/oidc.logger.service.ts","../../src/services/oidc.security.validation.ts","../../src/services/oidc-security-state-validation.service.ts","../../src/services/oidc.security.check-session.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc-data.service.ts","../../src/services/oidc.security.user-service.ts","../../src/services/uri-encoder.ts","../../node_modules/rxjs/node_modules/tslib/tslib.es6.js","../../node_modules/rxjs/src/internal/util/isFunction.ts","../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../node_modules/rxjs/src/internal/util/isObject.ts","../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../node_modules/rxjs/src/internal/Subscription.ts","../../node_modules/rxjs/src/internal/Subscriber.ts","../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../node_modules/rxjs/src/internal/util/pipe.ts","../../node_modules/rxjs/src/internal/Observable.ts","../../node_modules/rxjs/src/internal/observable/throwError.ts","../../node_modules/rxjs/src/internal/config.ts","../../node_modules/rxjs/src/internal/Observer.ts","../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../node_modules/rxjs/src/internal/Subject.ts","../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../src/services/oidc.security.config.service.ts","../../src/models/validate-state-result.model.ts","../../src/modules/auth.configuration.ts","../../src/services/oidc.security.storage.ts"],"sourcesContent":["\r\nimport {throwError as observableThrowError,  BehaviorSubject ,  Observable } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Inject, PLATFORM_ID, NgZone } from '@angular/core';\r\nimport { EventEmitter, Injectable, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthorizationResult } from '../models/authorization-result.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport {\r\n    AuthConfiguration,\r\n    OpenIDImplicitFlowConfiguration\r\n} from '../modules/auth.configuration';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    @Output() onModuleSetup = new EventEmitter<boolean>();\r\n    @Output() onAuthorizationResult = new EventEmitter<AuthorizationResult>();\r\n    @Output() onCheckSessionChanged = new EventEmitter<boolean>();\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isAuthorizedValue = false;\r\n\r\n    private lastUserData: any;\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private authConfiguration: AuthConfiguration,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(\r\n        openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration,\r\n        authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ): void {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this.onCheckSessionChanged.emit(\r\n                this.checkSessionChanged\r\n            );\r\n        });\r\n\r\n        this._userData.subscribe(() => {\r\n            this.onUserDataChanged();\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds)\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n                this.runTokenValidation();\r\n            }\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'STS server: ' + this.authConfiguration.stsServer\r\n        );\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n\r\n            if (this.authConfiguration.silent_renew) {\r\n                this.oidcSecuritySilentRenew.initRenew();\r\n\r\n                // Support authorization via DOM events.\r\n                // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n                //      We only ever want the latest setup service to be reacting to this event.\r\n                this.boundSilentRenewEvent =  this.silentRenewEventHandler.bind(this);\r\n\r\n                const instanceId = Math.random();\r\n\r\n                const boundSilentRenewInitEvent = ((e: CustomEvent) => {\r\n                    if (e.detail !== instanceId) {\r\n                        window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                        window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                    }\r\n                }).bind(this);\r\n\r\n                window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n                window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n                window.dispatchEvent(new CustomEvent('oidc-silent-renew-init', { detail: instanceId }));\r\n            }\r\n\r\n            if (\r\n                this.authConfiguration.start_checksession &&\r\n                !this.oidcSecurityCheckSession.doesSessionExist()\r\n            ) {\r\n                this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                    this.oidcSecurityCheckSession.pollServerSession(\r\n                        this.authConfiguration.client_id\r\n                    );\r\n                });\r\n            }\r\n        } else {\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n        }\r\n    }\r\n\r\n    getUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError(\r\n                'Well known endpoints must be loaded before user can login!'\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.config_validate_response_type(\r\n                this.authConfiguration.response_type\r\n            )\r\n        ) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'AuthorizedController created. local state: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            const url = this.createAuthorizeUrl(\r\n                this.authConfiguration.redirect_url,\r\n                nonce,\r\n                state,\r\n                this.authWellKnownEndpoints.authorization_endpoint\r\n            );\r\n\r\n            if (urlHandler) {\r\n                urlHandler(url);\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    authorizedCallback(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash\r\n            .split('&')\r\n            .reduce(function(resultData: any, item: string) {\r\n                const parts = item.split('=');\r\n                resultData[parts[0]] = parts[1];\r\n                return resultData;\r\n            }, {});\r\n\r\n        this.oidcSecurityCommon.authResult = result;\r\n        this.loggerService.logDebug(result);\r\n        this.loggerService.logDebug(\r\n            'authorizedCallback created, begin token validation'\r\n        );\r\n\r\n        this.getSigningKeys().subscribe(jwtKeys => {\r\n            const validationResult = this.getValidatedStateResult(\r\n                result,\r\n                jwtKeys\r\n            );\r\n\r\n            if (validationResult.authResponseIsValid) {\r\n                this.setAuthorizationData(\r\n                    validationResult.access_token,\r\n                    validationResult.id_token\r\n                );\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                if (this.authConfiguration.auto_userinfo) {\r\n                    this.getUserinfo(\r\n                        isRenewProcess,\r\n                        result,\r\n                        validationResult.id_token,\r\n                        validationResult.decoded_id_token\r\n                    ).subscribe(response => {\r\n                        if (response) {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.post_login_route\r\n                                ]);\r\n                            }\r\n                        } else {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.unauthorized_route\r\n                                ]);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!isRenewProcess) {\r\n                        // userData is set to the id_token decoded, auto get user data set to false\r\n                        this.oidcSecurityUserService.setUserData(\r\n                            validationResult.decoded_id_token\r\n                        );\r\n                        this.setUserData(\r\n                            this.oidcSecurityUserService.getUserData()\r\n                        );\r\n                        this.runTokenValidation();\r\n                    }\r\n\r\n                    this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                    if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                        this.router.navigate([\r\n                            this.authConfiguration.post_login_route\r\n                        ]);\r\n                    }\r\n                }\r\n            } else {\r\n                // something went wrong\r\n                this.loggerService.logWarning(\r\n                    'authorizedCallback, token(s) validation failed, resetting'\r\n                );\r\n                this.loggerService.logWarning(window.location.hash);\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                    this.router.navigate([\r\n                        this.authConfiguration.unauthorized_route\r\n                    ]);\r\n                }\r\n            }\r\n        }, (err) => {\r\n            /* Something went wrong while getting signing key */\r\n            this.loggerService.logWarning(\r\n                'Failed to retreive siging key with error: ' + JSON.stringify(err)\r\n            );\r\n            this.oidcSecurityCommon.silentRenewRunning = '';\r\n        });\r\n    }\r\n\r\n    getUserinfo(\r\n        isRenewProcess = false,\r\n        result?: any,\r\n        id_token?: any,\r\n        decoded_id_token?: any\r\n    ): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token\r\n            ? decoded_id_token\r\n            : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService\r\n                        .initUserData()\r\n                        .subscribe(() => {\r\n                            this.loggerService.logDebug(\r\n                                'authorizedCallback id_token token flow'\r\n                            );\r\n\r\n                            const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                            if (\r\n                                this.oidcSecurityValidation.validate_userdata_sub_id_token(\r\n                                    decoded_id_token.sub,\r\n                                    userData.sub\r\n                                )\r\n                            ) {\r\n                                this.setUserData(userData);\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityCommon.accessToken\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityUserService.getUserData()\r\n                                );\r\n\r\n                                this.oidcSecurityCommon.sessionState =\r\n                                    result.session_state;\r\n\r\n                                this.runTokenValidation();\r\n                                observer.next(true);\r\n                            } else {\r\n                                // something went wrong, userdata sub does not match that from id_token\r\n                                this.loggerService.logWarning(\r\n                                    'authorizedCallback, User data sub does not match sub in id_token'\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    'authorizedCallback, token(s) validation failed, resetting'\r\n                                );\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(\r\n                    this.oidcSecurityCommon.accessToken\r\n                );\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.authWellKnownEndpoints\r\n                    .end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(\r\n                    end_session_endpoint,\r\n                    id_token_hint\r\n                );\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (\r\n                    this.authConfiguration.start_checksession &&\r\n                    this.checkSessionChanged\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'only local login cleaned up, server session has changed'\r\n                    );\r\n                } else {\r\n                    window.location.href = url;\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug(\r\n                    'only local login cleaned up, no end_session_endpoint'\r\n                );\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<any> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'RefreshSession created. adding myautostate: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        let url = '';\r\n        if (this.authWellKnownEndpoints) {\r\n             url = this.createAuthorizeUrl(\r\n                this.authConfiguration.silent_redirect_url,\r\n                nonce,\r\n                state,\r\n                this.authWellKnownEndpoints.authorization_endpoint,\r\n                'none'\r\n            );\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        return this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\r\n\r\n    handleError(error: any) {\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([\r\n                    this.authConfiguration.unauthorized_route\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(\r\n        result: any,\r\n        jwtKeys: JwtKeys\r\n    ): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append(\r\n            'redirect_uri',\r\n            redirect_url\r\n        );\r\n        params = params.append(\r\n            'response_type',\r\n            this.authConfiguration.response_type\r\n        );\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign(\r\n            {},\r\n            this.oidcSecurityCommon.customRequestParams\r\n        );\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(\r\n        end_session_endpoint: string,\r\n        id_token_hint: string\r\n    ) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append(\r\n            'post_logout_redirect_uri',\r\n            this.authConfiguration.post_logout_redirect_uri\r\n        );\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\r\n\r\n    private onUserDataChanged() {\r\n        this.loggerService.logDebug(\r\n            `onUserDataChanged: last = ${this.lastUserData}, new = ${\r\n                this._userData.value\r\n            }`\r\n        );\r\n\r\n        if (this.lastUserData && !this._userData.value) {\r\n            this.loggerService.logDebug('onUserDataChanged: Logout detected.');\r\n            // TODO should we have an action here\r\n        }\r\n        this.lastUserData = this._userData.value;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.loggerService.logDebug(\r\n                'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\r\n            );\r\n\r\n            return this.oidcDataService\r\n                .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\r\n                .pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService\r\n            .get<JwtKeys>('undefined')\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return observableThrowError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n\r\n        /**\r\n            First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n            Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            if (this._userData.value && (this.oidcSecurityCommon.silentRenewRunning !== 'running') && this.getIdToken()) {\r\n                if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'IsAuthorized: id_token isTokenExpired, start silent renew if active'\r\n                    );\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(() => {\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        }, (err: any) => {\r\n                            this.loggerService.logError('Error: ' + err);\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        });\r\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        this.authorizedCallback(e.detail);\r\n    }\r\n}\r\n","export class AuthWellKnownEndpoints {\r\n\r\n    issuer = '';\r\n    jwks_uri = '';\r\n    authorization_endpoint = '';\r\n    token_endpoint = '';\r\n    userinfo_endpoint = '';\r\n    end_session_endpoint = '';\r\n    check_session_iframe = '';\r\n    revocation_endpoint = '';\r\n    introspection_endpoint = '';\r\n\r\n    public setWellKnownEndpoints(data: any) {\r\n        this.issuer = data.issuer;\r\n        this.jwks_uri = data.jwks_uri;\r\n        this.authorization_endpoint = data.authorization_endpoint;\r\n        this.token_endpoint = data.token_endpoint;\r\n        this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n        if (data.end_session_endpoint) {\r\n            this.end_session_endpoint = data.end_session_endpoint;\r\n        }\r\n\r\n        if (data.check_session_iframe) {\r\n            this.check_session_iframe = data.check_session_iframe;\r\n        }\r\n\r\n        if (data.revocation_endpoint) {\r\n            this.revocation_endpoint = data.revocation_endpoint;\r\n        }\r\n\r\n        if (data.introspection_endpoint) {\r\n            this.introspection_endpoint = data.introspection_endpoint;\r\n        }\r\n    }\r\n}\r\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c = [];\n}","import { ArrayHelperService } from '../services/oidc-array-helper.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport {\n    OidcSecurityStorage,\n    BrowserStorage\n} from '../services/oidc.security.storage';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { OidcDataService } from '../services/oidc-data.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                TokenHelperService,\n                LoggerService,\n                DefaultConfiguration,\n                ArrayHelperService,\n                AuthWellKnownEndpoints,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\n}\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storage_auth_result = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\r\n\r\n    private storage_access_token = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\r\n\r\n    private storage_id_token = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\r\n\r\n    private storage_is_authorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\r\n\r\n    private storage_user_data = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\r\n\r\n    private storage_auth_nonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\r\n\r\n    private storage_auth_state_control = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\r\n\r\n    private storage_session_state = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\r\n\r\n    private storage_silent_renew_running = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\r\n\r\n    private storage_custom_request_params = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\r\n\r\n    public set customRequestParams(value: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\r\n\r\n    setupModule() {}\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ArrayHelperService {\n    constructor() {}\n\n    arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TokenHelperService {\n    constructor() {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getPayloadFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getHeaderFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getSignatureFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    urlBase64Decode(str: string) {\n        let output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        return window.atob(output);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private authConfiguration: AuthConfiguration) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\r\nimport { ArrayHelperService } from './oidc-array-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n    constructor(\r\n        private arrayHelperService: ArrayHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    validate_id_token_exp_not_expired(\r\n        decoded_id_token: string,\r\n        offsetSeconds?: number\r\n    ): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(\r\n            decoded_id_token\r\n        );\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (\r\n            tokenExpirationDate.valueOf() >\r\n            new Date().valueOf() + offsetSeconds * 1000\r\n        );\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iss is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'sub is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'aud is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'exp is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iat is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(\r\n        dataIdToken: any,\r\n        max_offset_allowed_in_seconds: number\r\n    ): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return (\r\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\r\n            max_offset_allowed_in_seconds * 1000\r\n        );\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\r\n                    dataIdToken.nonce +\r\n                    ' local_nonce:' +\r\n                    local_nonce\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    validate_id_token_iss(\r\n        dataIdToken: any,\r\n        authWellKnownEndpoints_issuer: any\r\n    ): boolean {\r\n        if (\r\n            (dataIdToken.iss as string) !==\r\n            (authWellKnownEndpoints_issuer as string)\r\n        ) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.arraysEqual(\r\n                dataIdToken.aud,\r\n                aud\r\n            );\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug(\r\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\r\n                        dataIdToken.aud +\r\n                        ' client_id:' +\r\n                        aud\r\n                );\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\r\n                    dataIdToken.aud +\r\n                    ' client_id:' +\r\n                    aud\r\n            );\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if ((state as string) !== (local_state as string)) {\r\n            this.loggerService.logDebug(\r\n                'ValidateStateFromHashCallback failed, state: ' +\r\n                    state +\r\n                    ' local_state:' +\r\n                    local_state\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(\r\n        id_token_sub: any,\r\n        userdata_sub: any\r\n    ): boolean {\r\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\r\n            this.loggerService.logDebug(\r\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\r\n                    id_token_sub +\r\n                    ' userdata_sub:' +\r\n                    userdata_sub\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const header_data = this.tokenHelperService.getHeaderFromToken(\r\n            id_token,\r\n            false\r\n        );\r\n\r\n        if (\r\n            Object.keys(header_data).length === 0 &&\r\n            header_data.constructor === Object\r\n        ) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = header_data.kid;\r\n        const alg = header_data.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if (\r\n                    (key.kty as string) === 'RSA' &&\r\n                    (key.use as string) === 'sig'\r\n                ) {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning(\r\n                    'no keys found, incorrect Signature, validation failed for id_token'\r\n                );\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning(\r\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\r\n                );\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if (\r\n                        (key.kty as string) === 'RSA' &&\r\n                        (key.use as string) === 'sig'\r\n                    ) {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                            'RS256'\r\n                        ]);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning(\r\n                                'incorrect Signature, validation failed for id_token'\r\n                            );\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                        'RS256'\r\n                    ]);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning(\r\n                            'incorrect Signature, validation failed for id_token'\r\n                        );\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(response_type: string): boolean {\r\n        if (\r\n            response_type === 'id_token token' ||\r\n            response_type === 'id_token'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning(\r\n            'module configure incorrect, invalid response_type:' + response_type\r\n        );\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.loggerService.logDebug('From the server:' + at_hash);\r\n        const testdata = this.generate_at_hash('' + access_token);\r\n        this.loggerService.logDebug(\r\n            'client validation not decoded:' + testdata\r\n        );\r\n        if (testdata === (at_hash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash(\r\n                '' + decodeURIComponent(access_token)\r\n            );\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (at_hash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(access_token: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\n@Injectable()\nexport class StateValidationService {\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult('', '', false, {});\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (this.authWellKnownEndpoints) {\n            if (\n                !this.oidcSecurityValidation.validate_id_token_iss(\n                    toReturn.decoded_id_token,\n                    this.authWellKnownEndpoints.issuer\n                )\n            ) {\n                this.loggerService.logWarning(\n                    'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n                );\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\n}\n","import { Injectable, EventEmitter, Output, NgZone } from '@angular/core';\r\nimport { Observable ,  Observer } from 'rxjs';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _scheduledHeartBeat: any;\r\n\r\n    @Output()\r\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\r\n\r\n    constructor(\r\n        private authConfiguration: AuthConfiguration,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\r\n\r\n    doesSessionExist(): boolean {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById(\r\n            'myiFrameForCheckSession'\r\n        );\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (existsparent || exists) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    init() {\r\n        this.sessionIframe = window.document.createElement('iframe');\r\n        this.sessionIframe.id = 'myiFrameForCheckSession';\r\n        this.loggerService.logDebug(this.sessionIframe);\r\n        this.sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(this.sessionIframe);\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        this.iframeMessageEvent = this.messageHandler.bind(this);\r\n        window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: any): void {\r\n        if (!this._scheduledHeartBeat) {\r\n            this.pollServerSession(clientId);\r\n        }\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n        }\r\n    }\r\n\r\n    pollServerSession(clientId: any) {\r\n        const _pollServerSessionRecur = () => {\r\n            if (this.sessionIframe && clientId) {\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                const session_state = this.oidcSecurityCommon.sessionState;\r\n                if (session_state) {\r\n                    this.sessionIframe.contentWindow.postMessage(\r\n                        clientId + ' ' + session_state,\r\n                        this.authConfiguration.stsServer\r\n                    );\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning(\r\n                    'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\r\n                );\r\n                this.loggerService.logDebug(clientId);\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                // this.init();\r\n            }\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        });\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning(\r\n                    'error from checksession messageHandler'\r\n                );\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.loggerService.logDebug(\r\n                    e.data + ' from checksession messageHandler'\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observer ,  Observable } from 'rxjs';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    private sessionIframe: any;\r\n\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    initRenew() {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.loggerService.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\r\n\r\n    // TODO The return type of this method is never used. Is it needed?\r\n    startRenew(url: string): Observable<any> {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set(\n            'Authorization',\n            'Bearer ' + decodeURIComponent(token)\n        );\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n    ) { }\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(\r\n            map((data: any) => (this.userData = data))\r\n        );\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            return this.oidcDataService.getIdentityUserData(\r\n                this.authWellKnownEndpoints.userinfo_endpoint,\r\n                token\r\n            );\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(\r\n            'undefined',\r\n            token\r\n        );\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n          // node_modules, we cannot rely on `instanceof` checks\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic } from './types';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { OperatorFunction, PartialObserver, Subscribable } from '../internal/types';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super(errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    this.name = 'UnsubscriptionError';\n    (Object as any).setPrototypeOf(this, UnsubscriptionError.prototype);\n  }\n}\n","export const rxSubscriber =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    super('object unsubscribed');\n    this.name = 'ObjectUnsubscribedError';\n    (Object as any).setPrototypeOf(this, ObjectUnsubscribedError.prototype);\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n  @Output() onConfigurationLoaded = new EventEmitter<boolean>();\r\n  clientConfiguration: any;\r\n  wellKnownEndpoints: any;\r\n\r\n  async load(configUrl: string) {\r\n    try {\r\n      const response = await fetch(configUrl);\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.clientConfiguration = await response.json();\r\n      await this.load_using_stsServer(this.clientConfiguration.stsServer);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load' threw an error on calling ${configUrl}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n\r\n  async load_using_stsServer(stsServer: string) {\r\n    try {\r\n      const response = await fetch(\r\n        `${stsServer}/.well-known/openid-configuration`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n\r\n  async load_using_custom_stsServer(stsServer: string) {\r\n    try {\r\n      const response = await fetch(stsServer);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n}\r\n","export class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any\n    ) {}\n}\n","import { Injectable } from '@angular/core';\r\n\r\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n    // or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\r\n\r\nexport class OpenIDImplicitFlowConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    forbidden_route = '/forbidden';\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    storage: any = sessionStorage;\r\n}\r\n\r\n@Injectable()\r\nexport class AuthConfiguration {\r\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration | undefined;\r\n\r\n    get stsServer(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.stsServer;\r\n        }\r\n\r\n        return this.defaultConfig.stsServer;\r\n    }\r\n\r\n    get redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.redirect_url;\r\n        }\r\n\r\n        return this.defaultConfig.redirect_url;\r\n    }\r\n\r\n    get silent_redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_url;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_url;\r\n    }\r\n\r\n    get client_id(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.client_id;\r\n        }\r\n\r\n        return this.defaultConfig.client_id;\r\n    }\r\n\r\n    get response_type(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.response_type;\r\n        }\r\n\r\n        return this.defaultConfig.response_type;\r\n    }\r\n\r\n    get scope(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.scope;\r\n        }\r\n\r\n        return this.defaultConfig.scope;\r\n    }\r\n\r\n    get hd_param(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.hd_param;\r\n        }\r\n\r\n        return this.defaultConfig.hd_param;\r\n    }\r\n\r\n    get post_logout_redirect_uri(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri;\r\n        }\r\n\r\n        return this.defaultConfig.post_logout_redirect_uri;\r\n    }\r\n\r\n    get start_checksession(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.start_checksession;\r\n        }\r\n\r\n        return this.defaultConfig.start_checksession;\r\n    }\r\n\r\n    get silent_renew(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew;\r\n    }\r\n\r\n    get silent_renew_offset_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_offset_in_seconds;\r\n    }\r\n\r\n    get post_login_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_login_route;\r\n        }\r\n\r\n        return this.defaultConfig.post_login_route;\r\n    }\r\n\r\n    get forbidden_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.forbidden_route;\r\n        }\r\n\r\n        return this.defaultConfig.forbidden_route;\r\n    }\r\n\r\n    get unauthorized_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.unauthorized_route;\r\n        }\r\n\r\n        return this.defaultConfig.unauthorized_route;\r\n    }\r\n\r\n    get auto_userinfo(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_userinfo;\r\n        }\r\n\r\n        return this.defaultConfig.auto_userinfo;\r\n    }\r\n\r\n    get auto_clean_state_after_authentication(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication;\r\n        }\r\n\r\n        return this.defaultConfig.auto_clean_state_after_authentication;\r\n    }\r\n\r\n    get trigger_authorization_result_event(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event;\r\n        }\r\n\r\n        return this.defaultConfig.trigger_authorization_result_event;\r\n    }\r\n\r\n    get log_console_warning_active(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_warning_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_warning_active;\r\n    }\r\n\r\n    get log_console_debug_active(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_debug_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_debug_active;\r\n    }\r\n\r\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\r\n    }\r\n\r\n    get storage(): any {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.storage;\r\n        }\r\n\r\n        return this.defaultConfig.storage;\r\n    }\r\n\r\n    constructor(private defaultConfig: DefaultConfiguration) {}\r\n\r\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n}\n"],"names":["Observable","observer","_this","authConfiguration","response_type","isRenewProcess","oidcSecurityCommon","sessionState","result","session_state","next","complete","oidcSecurityUserService","initUserData","subscribe","loggerService","logDebug","userData","getUserData","oidcSecurityValidation","validate_userdata_sub_id_token","decoded_id_token","sub","setUserData","accessToken","runTokenValidation","logWarning","resetAuthorizationData","OidcSecurityService","prototype","logoff","this","authWellKnownEndpoints","end_session_endpoint","id_token_hint","idToken","url","createEndSessionUrl","start_checksession","checkSessionChanged","window","location","href","refreshSession","state","authStateControl","Date","now","Math","random","nonce","authNonce","createAuthorizeUrl","silent_redirect_url","authorization_endpoint","silentRenewRunning","oidcSecuritySilentRenew","startRenew","handleError","error","logError","status","trigger_authorization_result_event","onAuthorizationResult","emit","AuthorizationResult","unauthorized","router","navigate","forbidden_route","silentRenew","unauthorized_route","startCheckingSilentRenew","stopCheckingSilentRenew","_scheduledHeartBeat","clearTimeout","runTokenValidationRunning","getValidatedStateResult","jwtKeys","ValidateStateResult","stateValidationService","validateState","_userData","setIsAuthorized","isAuthorized","_isAuthorizedValue","_isAuthorized","setAuthorizationData","access_token","id_token","redirect_url","prompt","urlParts","split","authorizationUrl","params","HttpParams","fromString","encoder","UriEncoder","set","client_id","append","scope","hd_param","customParams","Object","assign","customRequestParams","keys","forEach","key","toString","authorizationEndsessionUrl","post_logout_redirect_uri","auto_userinfo","resetStorageData","onUserDataChanged","lastUserData","value","getSigningKeys","jwks_uri","oidcDataService","get","pipe","catchError","handleErrorGetSigningKeys","errMsg","Response","body","json","err","JSON","stringify","statusText","message","console","observableThrowError","silentRenewHeartBeatCheck","getIdToken","isTokenExpired","silent_renew_offset_in_seconds","silent_renew","setTimeout","zone","runOutsideAngular","silentRenewEventHandler","e","authorizedCallback","detail","type","Injectable","decorators","Inject","args","PLATFORM_ID","OidcDataService","StateValidationService","AuthConfiguration","Router","OidcSecurityCheckSession","OidcSecuritySilentRenew","OidcSecurityUserService","OidcSecurityCommon","OidcSecurityValidation","TokenHelperService","LoggerService","NgZone","onModuleSetup","Output","onCheckSessionChanged","AuthWellKnownEndpoints","issuer","token_endpoint","userinfo_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","setWellKnownEndpoints","data","JwtKeys","JwtKey","kty","use","kid","x5t","n","x5c","AuthModule","forRoot","token","ngModule","providers","OidcConfigService","DefaultConfiguration","ArrayHelperService","provide","OidcSecurityStorage","useClass","storage","BrowserStorage","NgModule","retrieve","storage_access_token","store","defineProperty","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_auth_state_control","storage_session_state","storage_silent_renew_running","storage_custom_request_params","setupModule","oidcSecurityStorage","read","write","storage_auth_result","getAccessToken","arraysEqual","arr1","arr2","length","i","getTokenExpirationDate","dataIdToken","hasOwnProperty","date","setUTCSeconds","exp","getPayloadFromToken","encode","encoded","parse","urlBase64Decode","getHeaderFromToken","getSignatureFromToken","str","output","replace","Error","atob","log_console_warning_active","warn","log_console_debug_active","log","arrayHelperService","tokenHelperService","offsetSeconds","decoded","validate_id_token_exp_not_expired","tokenExpirationDate","valueOf","validate_required_id_token","validated","validate_id_token_iat_max_offset","max_offset_allowed_in_seconds","dateTime_iat_id_token","iat","validate_id_token_nonce","local_nonce","validate_id_token_iss","authWellKnownEndpoints_issuer","iss","validate_id_token_aud","aud","Array","validateStateFromHashCallback","local_state","id_token_sub","userdata_sub","validate_signature_id_token","jwtkeys","header_data","constructor","alg","isValid","_d","_e","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_i","_a","_b","_c","config_validate_response_type","validate_id_token_at_hash","at_hash","testdata","generate_at_hash","testValue","decodeURIComponent","hash","crypto","Util","hashString","first128bits","substr","hextob64u","toReturn","max_id_token_iat_offset_allowed_in_seconds","authResponseIsValid","handleSuccessfulValidation","auto_clean_state_after_authentication","EventEmitter","doesSessionExist","existsparent","undefined","parentdoc","parent","document","getElementById","exists","sessionIframe","init","createElement","id","style","display","appendChild","src","iframeMessageEvent","messageHandler","bind","addEventListener","create","onload","startCheckingSession","clientId","pollServerSession","stopCheckingSession","_pollServerSessionRecur","contentWindow","postMessage","stsServer","origin","source","initRenew","httpClient","getWellknownEndpoints","headers","HttpHeaders","getIdentityUserData","HttpClient","map","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","platformId","oidcSecurityCheckSession","moduleSetup","BehaviorSubject","authWellKnownEndpointsLoaded","openIDImplicitFlowConfiguration","isPlatformBrowser","boundSilentRenewEvent","instanceId_1","boundSilentRenewInitEvent_1","removeEventListener","dispatchEvent","CustomEvent","asObservable","getIsAuthorized","getToken","getPayloadFromIdToken","setState","getState","setCustomRequestParameters","authorize","urlHandler","reduce","resultData","item","parts","authResult","validationResult","getUserinfo","response","authorized","post_login_route","__extends","d","b","__","extendStatics","isFunction","x","hostReportError","isObject","tryCatcher","tryCatchTarget","apply","arguments","errorObject","tryCatch","fn","flattenUnsubscriptionErrors","errors","errs","concat","UnsubscriptionError","isTrustedSubscriber","obj","Subscriber","rxSubscriberSymbol","toSubscriber","nextOrObserver","emptyObserver","pipeFromArray","fns","input","prev","noop","getPromiseCtor","promiseCtor","config","Promise","throwError","scheduler","subscriber","schedule","dispatch","setPrototypeOf","__proto__","p","_enable_super_gross_mode_that_will_cause_bad_things","useDeprecatedSynchronousErrorHandling","stack","empty","closed","_super","call","join","name","tslib_1.__extends","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","trial","isArray","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","rxSubscriber","Symbol","for","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","trustedSubscriber","SafeSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","_isScalar","_subscribe","lift","operator","observable","sink","_trySubscribe","resolve","reject","Symbol_observable","operations","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","AnonymousSubject","copy","slice","thrownError","_value","getValue","configurable","onConfigurationLoaded","load","configUrl","fetch","sent","ok","clientConfiguration","load_using_stsServer","err_1","wellKnownEndpoints","err_2","load_using_custom_stsServer","err_3","silent_renew_url","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","resource","defaultConfig","hasStorage","getItem","setItem"],"mappings":"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"}