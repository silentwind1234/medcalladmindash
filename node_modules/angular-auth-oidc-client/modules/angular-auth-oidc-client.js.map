{"version":3,"file":"angular-auth-oidc-client.js","sources":["../../index.ts","../../public_api.ts","../../src/angular-auth-oidc-client.ts","../../src/modules/auth.module.ts","../../src/models/jwtkeys.ts","../../src/models/auth.well-known-endpoints.ts","../../src/services/oidc.security.service.ts","../../src/services/uri-encoder.ts","../../src/services/oidc.security.user-service.ts","../../src/services/oidc-data.service.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc.security.check-session.ts","../../src/services/oidc-security-state-validation.service.ts","../../src/services/oidc.security.validation.ts","../../src/services/oidc.logger.service.ts","../../src/services/oidc-token-helper.service.ts","../../src/services/oidc-array-helper.service.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc.security.storage.ts","../../src/modules/auth.configuration.ts","../../src/models/validate-state-result.model.ts","../../src/services/oidc.security.config.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {ArrayHelperService as ɵd} from './src/services/oidc-array-helper.service';\nexport {OidcDataService as ɵa} from './src/services/oidc-data.service';\nexport {StateValidationService as ɵb} from './src/services/oidc-security-state-validation.service';\nexport {TokenHelperService as ɵe} from './src/services/oidc-token-helper.service';\nexport {LoggerService as ɵf} from './src/services/oidc.logger.service';\nexport {OidcSecurityCheckSession as ɵg} from './src/services/oidc.security.check-session';\nexport {OidcSecurityCommon as ɵc} from './src/services/oidc.security.common';\nexport {OidcSecuritySilentRenew as ɵh} from './src/services/oidc.security.silent-renew';\nexport {OidcSecurityUserService as ɵi} from './src/services/oidc.security.user-service';","/**\n * Angular OpenID Connect Implicit Flow.\n * OpenID Connect Implicit Flow RP Client\n * Written by Damien Bowden.\n * MIT license.\n * https://github.com/damienbod/angular-auth-oidc-client\n */\n\nexport * from './src/angular-auth-oidc-client';\n","// Public classes.\n\nexport * from './services/oidc.security.config.service';\nexport * from './services/oidc.security.service';\nexport * from './services/oidc.security.storage';\n\n\nexport * from './models/auth.well-known-endpoints';\nexport * from './models/authorization-result.enum';\nexport * from './models/jwtkeys';\nexport * from './models/validate-state-result.model';\n\nexport * from './modules/auth.configuration';\nexport * from './modules/auth.module';\n\nexport * from './services/oidc.security.validation';\n","import { ArrayHelperService } from '../services/oidc-array-helper.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport {\n    OidcSecurityStorage,\n    BrowserStorage\n} from '../services/oidc.security.storage';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { OidcDataService } from '../services/oidc-data.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                TokenHelperService,\n                LoggerService,\n                DefaultConfiguration,\n                ArrayHelperService,\n                AuthWellKnownEndpoints,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\n}\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c = [];\n}","export class AuthWellKnownEndpoints {\r\n\r\n    issuer = '';\r\n    jwks_uri = '';\r\n    authorization_endpoint = '';\r\n    token_endpoint = '';\r\n    userinfo_endpoint = '';\r\n    end_session_endpoint = '';\r\n    check_session_iframe = '';\r\n    revocation_endpoint = '';\r\n    introspection_endpoint = '';\r\n\r\n    public setWellKnownEndpoints(data: any) {\r\n        this.issuer = data.issuer;\r\n        this.jwks_uri = data.jwks_uri;\r\n        this.authorization_endpoint = data.authorization_endpoint;\r\n        this.token_endpoint = data.token_endpoint;\r\n        this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n        if (data.end_session_endpoint) {\r\n            this.end_session_endpoint = data.end_session_endpoint;\r\n        }\r\n\r\n        if (data.check_session_iframe) {\r\n            this.check_session_iframe = data.check_session_iframe;\r\n        }\r\n\r\n        if (data.revocation_endpoint) {\r\n            this.revocation_endpoint = data.revocation_endpoint;\r\n        }\r\n\r\n        if (data.introspection_endpoint) {\r\n            this.introspection_endpoint = data.introspection_endpoint;\r\n        }\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError,  BehaviorSubject ,  Observable } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Inject, PLATFORM_ID, NgZone } from '@angular/core';\r\nimport { EventEmitter, Injectable, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthorizationResult } from '../models/authorization-result.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport {\r\n    AuthConfiguration,\r\n    OpenIDImplicitFlowConfiguration\r\n} from '../modules/auth.configuration';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    @Output() onModuleSetup = new EventEmitter<boolean>();\r\n    @Output() onAuthorizationResult = new EventEmitter<AuthorizationResult>();\r\n    @Output() onCheckSessionChanged = new EventEmitter<boolean>();\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isAuthorizedValue = false;\r\n\r\n    private lastUserData: any;\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private authConfiguration: AuthConfiguration,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(\r\n        openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration,\r\n        authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ): void {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this.onCheckSessionChanged.emit(\r\n                this.checkSessionChanged\r\n            );\r\n        });\r\n\r\n        this._userData.subscribe(() => {\r\n            this.onUserDataChanged();\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds)\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n                this.runTokenValidation();\r\n            }\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'STS server: ' + this.authConfiguration.stsServer\r\n        );\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n\r\n            if (this.authConfiguration.silent_renew) {\r\n                this.oidcSecuritySilentRenew.initRenew();\r\n\r\n                // Support authorization via DOM events.\r\n                // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n                //      We only ever want the latest setup service to be reacting to this event.\r\n                this.boundSilentRenewEvent =  this.silentRenewEventHandler.bind(this);\r\n\r\n                const instanceId = Math.random();\r\n\r\n                const boundSilentRenewInitEvent = ((e: CustomEvent) => {\r\n                    if (e.detail !== instanceId) {\r\n                        window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                        window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                    }\r\n                }).bind(this);\r\n\r\n                window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n                window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n                window.dispatchEvent(new CustomEvent('oidc-silent-renew-init', { detail: instanceId }));\r\n            }\r\n\r\n            if (\r\n                this.authConfiguration.start_checksession &&\r\n                !this.oidcSecurityCheckSession.doesSessionExist()\r\n            ) {\r\n                this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                    this.oidcSecurityCheckSession.pollServerSession(\r\n                        this.authConfiguration.client_id\r\n                    );\r\n                });\r\n            }\r\n        } else {\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n        }\r\n    }\r\n\r\n    getUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError(\r\n                'Well known endpoints must be loaded before user can login!'\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.config_validate_response_type(\r\n                this.authConfiguration.response_type\r\n            )\r\n        ) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'AuthorizedController created. local state: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            const url = this.createAuthorizeUrl(\r\n                this.authConfiguration.redirect_url,\r\n                nonce,\r\n                state,\r\n                this.authWellKnownEndpoints.authorization_endpoint\r\n            );\r\n\r\n            if (urlHandler) {\r\n                urlHandler(url);\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    authorizedCallback(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash\r\n            .split('&')\r\n            .reduce(function(resultData: any, item: string) {\r\n                const parts = item.split('=');\r\n                resultData[parts[0]] = parts[1];\r\n                return resultData;\r\n            }, {});\r\n\r\n        this.oidcSecurityCommon.authResult = result;\r\n        this.loggerService.logDebug(result);\r\n        this.loggerService.logDebug(\r\n            'authorizedCallback created, begin token validation'\r\n        );\r\n\r\n        this.getSigningKeys().subscribe(jwtKeys => {\r\n            const validationResult = this.getValidatedStateResult(\r\n                result,\r\n                jwtKeys\r\n            );\r\n\r\n            if (validationResult.authResponseIsValid) {\r\n                this.setAuthorizationData(\r\n                    validationResult.access_token,\r\n                    validationResult.id_token\r\n                );\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                if (this.authConfiguration.auto_userinfo) {\r\n                    this.getUserinfo(\r\n                        isRenewProcess,\r\n                        result,\r\n                        validationResult.id_token,\r\n                        validationResult.decoded_id_token\r\n                    ).subscribe(response => {\r\n                        if (response) {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.post_login_route\r\n                                ]);\r\n                            }\r\n                        } else {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.unauthorized_route\r\n                                ]);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!isRenewProcess) {\r\n                        // userData is set to the id_token decoded, auto get user data set to false\r\n                        this.oidcSecurityUserService.setUserData(\r\n                            validationResult.decoded_id_token\r\n                        );\r\n                        this.setUserData(\r\n                            this.oidcSecurityUserService.getUserData()\r\n                        );\r\n                        this.runTokenValidation();\r\n                    }\r\n\r\n                    this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                    if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                        this.router.navigate([\r\n                            this.authConfiguration.post_login_route\r\n                        ]);\r\n                    }\r\n                }\r\n            } else {\r\n                // something went wrong\r\n                this.loggerService.logWarning(\r\n                    'authorizedCallback, token(s) validation failed, resetting'\r\n                );\r\n                this.loggerService.logWarning(window.location.hash);\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                    this.router.navigate([\r\n                        this.authConfiguration.unauthorized_route\r\n                    ]);\r\n                }\r\n            }\r\n        }, (err) => {\r\n            /* Something went wrong while getting signing key */\r\n            this.loggerService.logWarning(\r\n                'Failed to retreive siging key with error: ' + JSON.stringify(err)\r\n            );\r\n            this.oidcSecurityCommon.silentRenewRunning = '';\r\n        });\r\n    }\r\n\r\n    getUserinfo(\r\n        isRenewProcess = false,\r\n        result?: any,\r\n        id_token?: any,\r\n        decoded_id_token?: any\r\n    ): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token\r\n            ? decoded_id_token\r\n            : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService\r\n                        .initUserData()\r\n                        .subscribe(() => {\r\n                            this.loggerService.logDebug(\r\n                                'authorizedCallback id_token token flow'\r\n                            );\r\n\r\n                            const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                            if (\r\n                                this.oidcSecurityValidation.validate_userdata_sub_id_token(\r\n                                    decoded_id_token.sub,\r\n                                    userData.sub\r\n                                )\r\n                            ) {\r\n                                this.setUserData(userData);\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityCommon.accessToken\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityUserService.getUserData()\r\n                                );\r\n\r\n                                this.oidcSecurityCommon.sessionState =\r\n                                    result.session_state;\r\n\r\n                                this.runTokenValidation();\r\n                                observer.next(true);\r\n                            } else {\r\n                                // something went wrong, userdata sub does not match that from id_token\r\n                                this.loggerService.logWarning(\r\n                                    'authorizedCallback, User data sub does not match sub in id_token'\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    'authorizedCallback, token(s) validation failed, resetting'\r\n                                );\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(\r\n                    this.oidcSecurityCommon.accessToken\r\n                );\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.authWellKnownEndpoints\r\n                    .end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(\r\n                    end_session_endpoint,\r\n                    id_token_hint\r\n                );\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (\r\n                    this.authConfiguration.start_checksession &&\r\n                    this.checkSessionChanged\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'only local login cleaned up, server session has changed'\r\n                    );\r\n                } else {\r\n                    window.location.href = url;\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug(\r\n                    'only local login cleaned up, no end_session_endpoint'\r\n                );\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<any> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'RefreshSession created. adding myautostate: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        let url = '';\r\n        if (this.authWellKnownEndpoints) {\r\n             url = this.createAuthorizeUrl(\r\n                this.authConfiguration.silent_redirect_url,\r\n                nonce,\r\n                state,\r\n                this.authWellKnownEndpoints.authorization_endpoint,\r\n                'none'\r\n            );\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        return this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\r\n\r\n    handleError(error: any) {\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([\r\n                    this.authConfiguration.unauthorized_route\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(\r\n        result: any,\r\n        jwtKeys: JwtKeys\r\n    ): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append(\r\n            'redirect_uri',\r\n            redirect_url\r\n        );\r\n        params = params.append(\r\n            'response_type',\r\n            this.authConfiguration.response_type\r\n        );\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign(\r\n            {},\r\n            this.oidcSecurityCommon.customRequestParams\r\n        );\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(\r\n        end_session_endpoint: string,\r\n        id_token_hint: string\r\n    ) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append(\r\n            'post_logout_redirect_uri',\r\n            this.authConfiguration.post_logout_redirect_uri\r\n        );\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\r\n\r\n    private onUserDataChanged() {\r\n        this.loggerService.logDebug(\r\n            `onUserDataChanged: last = ${this.lastUserData}, new = ${\r\n                this._userData.value\r\n            }`\r\n        );\r\n\r\n        if (this.lastUserData && !this._userData.value) {\r\n            this.loggerService.logDebug('onUserDataChanged: Logout detected.');\r\n            // TODO should we have an action here\r\n        }\r\n        this.lastUserData = this._userData.value;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.loggerService.logDebug(\r\n                'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\r\n            );\r\n\r\n            return this.oidcDataService\r\n                .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\r\n                .pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService\r\n            .get<JwtKeys>('undefined')\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return observableThrowError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n\r\n        /**\r\n            First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n            Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            if (this._userData.value && (this.oidcSecurityCommon.silentRenewRunning !== 'running') && this.getIdToken()) {\r\n                if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'IsAuthorized: id_token isTokenExpired, start silent renew if active'\r\n                    );\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(() => {\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        }, (err: any) => {\r\n                            this.loggerService.logError('Error: ' + err);\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        });\r\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        this.authorizedCallback(e.detail);\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n    ) { }\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(\r\n            map((data: any) => (this.userData = data))\r\n        );\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            return this.oidcDataService.getIdentityUserData(\r\n                this.authWellKnownEndpoints.userinfo_endpoint,\r\n                token\r\n            );\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(\r\n            'undefined',\r\n            token\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set(\n            'Authorization',\n            'Bearer ' + decodeURIComponent(token)\n        );\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observer ,  Observable } from 'rxjs';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    private sessionIframe: any;\r\n\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    initRenew() {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.loggerService.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\r\n\r\n    // TODO The return type of this method is never used. Is it needed?\r\n    startRenew(url: string): Observable<any> {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable, EventEmitter, Output, NgZone } from '@angular/core';\r\nimport { Observable ,  Observer } from 'rxjs';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _scheduledHeartBeat: any;\r\n\r\n    @Output()\r\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\r\n\r\n    constructor(\r\n        private authConfiguration: AuthConfiguration,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\r\n\r\n    doesSessionExist(): boolean {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById(\r\n            'myiFrameForCheckSession'\r\n        );\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (existsparent || exists) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    init() {\r\n        this.sessionIframe = window.document.createElement('iframe');\r\n        this.sessionIframe.id = 'myiFrameForCheckSession';\r\n        this.loggerService.logDebug(this.sessionIframe);\r\n        this.sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(this.sessionIframe);\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        this.iframeMessageEvent = this.messageHandler.bind(this);\r\n        window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: any): void {\r\n        if (!this._scheduledHeartBeat) {\r\n            this.pollServerSession(clientId);\r\n        }\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n        }\r\n    }\r\n\r\n    pollServerSession(clientId: any) {\r\n        const _pollServerSessionRecur = () => {\r\n            if (this.sessionIframe && clientId) {\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                const session_state = this.oidcSecurityCommon.sessionState;\r\n                if (session_state) {\r\n                    this.sessionIframe.contentWindow.postMessage(\r\n                        clientId + ' ' + session_state,\r\n                        this.authConfiguration.stsServer\r\n                    );\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning(\r\n                    'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\r\n                );\r\n                this.loggerService.logDebug(clientId);\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                // this.init();\r\n            }\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        });\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning(\r\n                    'error from checksession messageHandler'\r\n                );\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.loggerService.logDebug(\r\n                    e.data + ' from checksession messageHandler'\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\n@Injectable()\nexport class StateValidationService {\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult('', '', false, {});\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (this.authWellKnownEndpoints) {\n            if (\n                !this.oidcSecurityValidation.validate_id_token_iss(\n                    toReturn.decoded_id_token,\n                    this.authWellKnownEndpoints.issuer\n                )\n            ) {\n                this.loggerService.logWarning(\n                    'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n                );\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\r\nimport { ArrayHelperService } from './oidc-array-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n    constructor(\r\n        private arrayHelperService: ArrayHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    validate_id_token_exp_not_expired(\r\n        decoded_id_token: string,\r\n        offsetSeconds?: number\r\n    ): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(\r\n            decoded_id_token\r\n        );\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (\r\n            tokenExpirationDate.valueOf() >\r\n            new Date().valueOf() + offsetSeconds * 1000\r\n        );\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iss is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'sub is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'aud is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'exp is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iat is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(\r\n        dataIdToken: any,\r\n        max_offset_allowed_in_seconds: number\r\n    ): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return (\r\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\r\n            max_offset_allowed_in_seconds * 1000\r\n        );\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\r\n                    dataIdToken.nonce +\r\n                    ' local_nonce:' +\r\n                    local_nonce\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    validate_id_token_iss(\r\n        dataIdToken: any,\r\n        authWellKnownEndpoints_issuer: any\r\n    ): boolean {\r\n        if (\r\n            (dataIdToken.iss as string) !==\r\n            (authWellKnownEndpoints_issuer as string)\r\n        ) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.arraysEqual(\r\n                dataIdToken.aud,\r\n                aud\r\n            );\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug(\r\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\r\n                        dataIdToken.aud +\r\n                        ' client_id:' +\r\n                        aud\r\n                );\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\r\n                    dataIdToken.aud +\r\n                    ' client_id:' +\r\n                    aud\r\n            );\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if ((state as string) !== (local_state as string)) {\r\n            this.loggerService.logDebug(\r\n                'ValidateStateFromHashCallback failed, state: ' +\r\n                    state +\r\n                    ' local_state:' +\r\n                    local_state\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(\r\n        id_token_sub: any,\r\n        userdata_sub: any\r\n    ): boolean {\r\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\r\n            this.loggerService.logDebug(\r\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\r\n                    id_token_sub +\r\n                    ' userdata_sub:' +\r\n                    userdata_sub\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const header_data = this.tokenHelperService.getHeaderFromToken(\r\n            id_token,\r\n            false\r\n        );\r\n\r\n        if (\r\n            Object.keys(header_data).length === 0 &&\r\n            header_data.constructor === Object\r\n        ) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = header_data.kid;\r\n        const alg = header_data.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if (\r\n                    (key.kty as string) === 'RSA' &&\r\n                    (key.use as string) === 'sig'\r\n                ) {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning(\r\n                    'no keys found, incorrect Signature, validation failed for id_token'\r\n                );\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning(\r\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\r\n                );\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if (\r\n                        (key.kty as string) === 'RSA' &&\r\n                        (key.use as string) === 'sig'\r\n                    ) {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                            'RS256'\r\n                        ]);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning(\r\n                                'incorrect Signature, validation failed for id_token'\r\n                            );\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                        'RS256'\r\n                    ]);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning(\r\n                            'incorrect Signature, validation failed for id_token'\r\n                        );\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(response_type: string): boolean {\r\n        if (\r\n            response_type === 'id_token token' ||\r\n            response_type === 'id_token'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning(\r\n            'module configure incorrect, invalid response_type:' + response_type\r\n        );\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.loggerService.logDebug('From the server:' + at_hash);\r\n        const testdata = this.generate_at_hash('' + access_token);\r\n        this.loggerService.logDebug(\r\n            'client validation not decoded:' + testdata\r\n        );\r\n        if (testdata === (at_hash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash(\r\n                '' + decodeURIComponent(access_token)\r\n            );\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (at_hash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(access_token: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private authConfiguration: AuthConfiguration) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TokenHelperService {\n    constructor() {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getPayloadFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getHeaderFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getSignatureFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    urlBase64Decode(str: string) {\n        let output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        return window.atob(output);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ArrayHelperService {\n    constructor() {}\n\n    arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storage_auth_result = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\r\n\r\n    private storage_access_token = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\r\n\r\n    private storage_id_token = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\r\n\r\n    private storage_is_authorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\r\n\r\n    private storage_user_data = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\r\n\r\n    private storage_auth_nonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\r\n\r\n    private storage_auth_state_control = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\r\n\r\n    private storage_session_state = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\r\n\r\n    private storage_silent_renew_running = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\r\n\r\n    private storage_custom_request_params = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\r\n\r\n    public set customRequestParams(value: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\r\n\r\n    setupModule() {}\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n    // or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\r\n\r\nexport class OpenIDImplicitFlowConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    forbidden_route = '/forbidden';\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    storage: any = sessionStorage;\r\n}\r\n\r\n@Injectable()\r\nexport class AuthConfiguration {\r\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration | undefined;\r\n\r\n    get stsServer(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.stsServer;\r\n        }\r\n\r\n        return this.defaultConfig.stsServer;\r\n    }\r\n\r\n    get redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.redirect_url;\r\n        }\r\n\r\n        return this.defaultConfig.redirect_url;\r\n    }\r\n\r\n    get silent_redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_url;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_url;\r\n    }\r\n\r\n    get client_id(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.client_id;\r\n        }\r\n\r\n        return this.defaultConfig.client_id;\r\n    }\r\n\r\n    get response_type(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.response_type;\r\n        }\r\n\r\n        return this.defaultConfig.response_type;\r\n    }\r\n\r\n    get scope(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.scope;\r\n        }\r\n\r\n        return this.defaultConfig.scope;\r\n    }\r\n\r\n    get hd_param(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.hd_param;\r\n        }\r\n\r\n        return this.defaultConfig.hd_param;\r\n    }\r\n\r\n    get post_logout_redirect_uri(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri;\r\n        }\r\n\r\n        return this.defaultConfig.post_logout_redirect_uri;\r\n    }\r\n\r\n    get start_checksession(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.start_checksession;\r\n        }\r\n\r\n        return this.defaultConfig.start_checksession;\r\n    }\r\n\r\n    get silent_renew(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew;\r\n    }\r\n\r\n    get silent_renew_offset_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_offset_in_seconds;\r\n    }\r\n\r\n    get post_login_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_login_route;\r\n        }\r\n\r\n        return this.defaultConfig.post_login_route;\r\n    }\r\n\r\n    get forbidden_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.forbidden_route;\r\n        }\r\n\r\n        return this.defaultConfig.forbidden_route;\r\n    }\r\n\r\n    get unauthorized_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.unauthorized_route;\r\n        }\r\n\r\n        return this.defaultConfig.unauthorized_route;\r\n    }\r\n\r\n    get auto_userinfo(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_userinfo;\r\n        }\r\n\r\n        return this.defaultConfig.auto_userinfo;\r\n    }\r\n\r\n    get auto_clean_state_after_authentication(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication;\r\n        }\r\n\r\n        return this.defaultConfig.auto_clean_state_after_authentication;\r\n    }\r\n\r\n    get trigger_authorization_result_event(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event;\r\n        }\r\n\r\n        return this.defaultConfig.trigger_authorization_result_event;\r\n    }\r\n\r\n    get log_console_warning_active(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_warning_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_warning_active;\r\n    }\r\n\r\n    get log_console_debug_active(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_debug_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_debug_active;\r\n    }\r\n\r\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\r\n    }\r\n\r\n    get storage(): any {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.storage;\r\n        }\r\n\r\n        return this.defaultConfig.storage;\r\n    }\r\n\r\n    constructor(private defaultConfig: DefaultConfiguration) {}\r\n\r\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\n}\r\n","export class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any\n    ) {}\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n  @Output() onConfigurationLoaded = new EventEmitter<boolean>();\r\n  clientConfiguration: any;\r\n  wellKnownEndpoints: any;\r\n\r\n  async load(configUrl: string) {\r\n    try {\r\n      const response = await fetch(configUrl);\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.clientConfiguration = await response.json();\r\n      await this.load_using_stsServer(this.clientConfiguration.stsServer);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load' threw an error on calling ${configUrl}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n\r\n  async load_using_stsServer(stsServer: string) {\r\n    try {\r\n      const response = await fetch(\r\n        `${stsServer}/.well-known/openid-configuration`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n\r\n  async load_using_custom_stsServer(stsServer: string) {\r\n    try {\r\n      const response = await fetch(stsServer);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n}\r\n"],"names":["observableThrowError"],"mappings":"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"}