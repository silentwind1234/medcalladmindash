{"version":3,"file":"angular-auth-oidc-client.es5.js","sources":["../../index.ts","../../public_api.ts","../../src/angular-auth-oidc-client.ts","../../src/modules/auth.module.ts","../../src/models/jwtkeys.ts","../../src/models/auth.well-known-endpoints.ts","../../src/services/oidc.security.service.ts","../../src/services/uri-encoder.ts","../../src/services/oidc.security.user-service.ts","../../src/services/oidc-data.service.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc.security.check-session.ts","../../src/services/oidc-security-state-validation.service.ts","../../src/services/oidc.security.validation.ts","../../src/services/oidc.logger.service.ts","../../src/services/oidc-token-helper.service.ts","../../src/services/oidc-array-helper.service.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc.security.storage.ts","../../src/modules/auth.configuration.ts","../../src/models/validate-state-result.model.ts","../../src/services/oidc.security.config.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {ArrayHelperService as ɵd} from './src/services/oidc-array-helper.service';\nexport {OidcDataService as ɵa} from './src/services/oidc-data.service';\nexport {StateValidationService as ɵb} from './src/services/oidc-security-state-validation.service';\nexport {TokenHelperService as ɵe} from './src/services/oidc-token-helper.service';\nexport {LoggerService as ɵf} from './src/services/oidc.logger.service';\nexport {OidcSecurityCheckSession as ɵg} from './src/services/oidc.security.check-session';\nexport {OidcSecurityCommon as ɵc} from './src/services/oidc.security.common';\nexport {OidcSecuritySilentRenew as ɵh} from './src/services/oidc.security.silent-renew';\nexport {OidcSecurityUserService as ɵi} from './src/services/oidc.security.user-service';","/**\n * Angular OpenID Connect Implicit Flow.\n * OpenID Connect Implicit Flow RP Client\n * Written by Damien Bowden.\n * MIT license.\n * https://github.com/damienbod/angular-auth-oidc-client\n */\n\nexport * from './src/angular-auth-oidc-client';\n","// Public classes.\n\nexport * from './services/oidc.security.config.service';\nexport * from './services/oidc.security.service';\nexport * from './services/oidc.security.storage';\n\n\nexport * from './models/auth.well-known-endpoints';\nexport * from './models/authorization-result.enum';\nexport * from './models/jwtkeys';\nexport * from './models/validate-state-result.model';\n\nexport * from './modules/auth.configuration';\nexport * from './modules/auth.module';\n\nexport * from './services/oidc.security.validation';\n","import { ArrayHelperService } from '../services/oidc-array-helper.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport {\n    OidcSecurityStorage,\n    BrowserStorage\n} from '../services/oidc.security.storage';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { OidcDataService } from '../services/oidc-data.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                TokenHelperService,\n                LoggerService,\n                DefaultConfiguration,\n                ArrayHelperService,\n                AuthWellKnownEndpoints,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\n}\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c = [];\n}","export class AuthWellKnownEndpoints {\r\n\r\n    issuer = '';\r\n    jwks_uri = '';\r\n    authorization_endpoint = '';\r\n    token_endpoint = '';\r\n    userinfo_endpoint = '';\r\n    end_session_endpoint = '';\r\n    check_session_iframe = '';\r\n    revocation_endpoint = '';\r\n    introspection_endpoint = '';\r\n\r\n    public setWellKnownEndpoints(data: any) {\r\n        this.issuer = data.issuer;\r\n        this.jwks_uri = data.jwks_uri;\r\n        this.authorization_endpoint = data.authorization_endpoint;\r\n        this.token_endpoint = data.token_endpoint;\r\n        this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n        if (data.end_session_endpoint) {\r\n            this.end_session_endpoint = data.end_session_endpoint;\r\n        }\r\n\r\n        if (data.check_session_iframe) {\r\n            this.check_session_iframe = data.check_session_iframe;\r\n        }\r\n\r\n        if (data.revocation_endpoint) {\r\n            this.revocation_endpoint = data.revocation_endpoint;\r\n        }\r\n\r\n        if (data.introspection_endpoint) {\r\n            this.introspection_endpoint = data.introspection_endpoint;\r\n        }\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError,  BehaviorSubject ,  Observable } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Inject, PLATFORM_ID, NgZone } from '@angular/core';\r\nimport { EventEmitter, Injectable, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthorizationResult } from '../models/authorization-result.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport {\r\n    AuthConfiguration,\r\n    OpenIDImplicitFlowConfiguration\r\n} from '../modules/auth.configuration';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    @Output() onModuleSetup = new EventEmitter<boolean>();\r\n    @Output() onAuthorizationResult = new EventEmitter<AuthorizationResult>();\r\n    @Output() onCheckSessionChanged = new EventEmitter<boolean>();\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isAuthorizedValue = false;\r\n\r\n    private lastUserData: any;\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private authConfiguration: AuthConfiguration,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(\r\n        openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration,\r\n        authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ): void {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this.onCheckSessionChanged.emit(\r\n                this.checkSessionChanged\r\n            );\r\n        });\r\n\r\n        this._userData.subscribe(() => {\r\n            this.onUserDataChanged();\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds)\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n                this.runTokenValidation();\r\n            }\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'STS server: ' + this.authConfiguration.stsServer\r\n        );\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n\r\n            if (this.authConfiguration.silent_renew) {\r\n                this.oidcSecuritySilentRenew.initRenew();\r\n\r\n                // Support authorization via DOM events.\r\n                // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n                //      We only ever want the latest setup service to be reacting to this event.\r\n                this.boundSilentRenewEvent =  this.silentRenewEventHandler.bind(this);\r\n\r\n                const instanceId = Math.random();\r\n\r\n                const boundSilentRenewInitEvent = ((e: CustomEvent) => {\r\n                    if (e.detail !== instanceId) {\r\n                        window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                        window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                    }\r\n                }).bind(this);\r\n\r\n                window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n                window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n                window.dispatchEvent(new CustomEvent('oidc-silent-renew-init', { detail: instanceId }));\r\n            }\r\n\r\n            if (\r\n                this.authConfiguration.start_checksession &&\r\n                !this.oidcSecurityCheckSession.doesSessionExist()\r\n            ) {\r\n                this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                    this.oidcSecurityCheckSession.pollServerSession(\r\n                        this.authConfiguration.client_id\r\n                    );\r\n                });\r\n            }\r\n        } else {\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n        }\r\n    }\r\n\r\n    getUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError(\r\n                'Well known endpoints must be loaded before user can login!'\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.config_validate_response_type(\r\n                this.authConfiguration.response_type\r\n            )\r\n        ) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'AuthorizedController created. local state: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            const url = this.createAuthorizeUrl(\r\n                this.authConfiguration.redirect_url,\r\n                nonce,\r\n                state,\r\n                this.authWellKnownEndpoints.authorization_endpoint\r\n            );\r\n\r\n            if (urlHandler) {\r\n                urlHandler(url);\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    authorizedCallback(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash\r\n            .split('&')\r\n            .reduce(function(resultData: any, item: string) {\r\n                const parts = item.split('=');\r\n                resultData[parts[0]] = parts[1];\r\n                return resultData;\r\n            }, {});\r\n\r\n        this.oidcSecurityCommon.authResult = result;\r\n        this.loggerService.logDebug(result);\r\n        this.loggerService.logDebug(\r\n            'authorizedCallback created, begin token validation'\r\n        );\r\n\r\n        this.getSigningKeys().subscribe(jwtKeys => {\r\n            const validationResult = this.getValidatedStateResult(\r\n                result,\r\n                jwtKeys\r\n            );\r\n\r\n            if (validationResult.authResponseIsValid) {\r\n                this.setAuthorizationData(\r\n                    validationResult.access_token,\r\n                    validationResult.id_token\r\n                );\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                if (this.authConfiguration.auto_userinfo) {\r\n                    this.getUserinfo(\r\n                        isRenewProcess,\r\n                        result,\r\n                        validationResult.id_token,\r\n                        validationResult.decoded_id_token\r\n                    ).subscribe(response => {\r\n                        if (response) {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.post_login_route\r\n                                ]);\r\n                            }\r\n                        } else {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.unauthorized_route\r\n                                ]);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!isRenewProcess) {\r\n                        // userData is set to the id_token decoded, auto get user data set to false\r\n                        this.oidcSecurityUserService.setUserData(\r\n                            validationResult.decoded_id_token\r\n                        );\r\n                        this.setUserData(\r\n                            this.oidcSecurityUserService.getUserData()\r\n                        );\r\n                        this.runTokenValidation();\r\n                    }\r\n\r\n                    this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                    if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                        this.router.navigate([\r\n                            this.authConfiguration.post_login_route\r\n                        ]);\r\n                    }\r\n                }\r\n            } else {\r\n                // something went wrong\r\n                this.loggerService.logWarning(\r\n                    'authorizedCallback, token(s) validation failed, resetting'\r\n                );\r\n                this.loggerService.logWarning(window.location.hash);\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                    this.router.navigate([\r\n                        this.authConfiguration.unauthorized_route\r\n                    ]);\r\n                }\r\n            }\r\n        }, (err) => {\r\n            /* Something went wrong while getting signing key */\r\n            this.loggerService.logWarning(\r\n                'Failed to retreive siging key with error: ' + JSON.stringify(err)\r\n            );\r\n            this.oidcSecurityCommon.silentRenewRunning = '';\r\n        });\r\n    }\r\n\r\n    getUserinfo(\r\n        isRenewProcess = false,\r\n        result?: any,\r\n        id_token?: any,\r\n        decoded_id_token?: any\r\n    ): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token\r\n            ? decoded_id_token\r\n            : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService\r\n                        .initUserData()\r\n                        .subscribe(() => {\r\n                            this.loggerService.logDebug(\r\n                                'authorizedCallback id_token token flow'\r\n                            );\r\n\r\n                            const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                            if (\r\n                                this.oidcSecurityValidation.validate_userdata_sub_id_token(\r\n                                    decoded_id_token.sub,\r\n                                    userData.sub\r\n                                )\r\n                            ) {\r\n                                this.setUserData(userData);\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityCommon.accessToken\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityUserService.getUserData()\r\n                                );\r\n\r\n                                this.oidcSecurityCommon.sessionState =\r\n                                    result.session_state;\r\n\r\n                                this.runTokenValidation();\r\n                                observer.next(true);\r\n                            } else {\r\n                                // something went wrong, userdata sub does not match that from id_token\r\n                                this.loggerService.logWarning(\r\n                                    'authorizedCallback, User data sub does not match sub in id_token'\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    'authorizedCallback, token(s) validation failed, resetting'\r\n                                );\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(\r\n                    this.oidcSecurityCommon.accessToken\r\n                );\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.authWellKnownEndpoints\r\n                    .end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(\r\n                    end_session_endpoint,\r\n                    id_token_hint\r\n                );\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (\r\n                    this.authConfiguration.start_checksession &&\r\n                    this.checkSessionChanged\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'only local login cleaned up, server session has changed'\r\n                    );\r\n                } else {\r\n                    window.location.href = url;\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug(\r\n                    'only local login cleaned up, no end_session_endpoint'\r\n                );\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<any> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'RefreshSession created. adding myautostate: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        let url = '';\r\n        if (this.authWellKnownEndpoints) {\r\n             url = this.createAuthorizeUrl(\r\n                this.authConfiguration.silent_redirect_url,\r\n                nonce,\r\n                state,\r\n                this.authWellKnownEndpoints.authorization_endpoint,\r\n                'none'\r\n            );\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        return this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\r\n\r\n    handleError(error: any) {\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([\r\n                    this.authConfiguration.unauthorized_route\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(\r\n        result: any,\r\n        jwtKeys: JwtKeys\r\n    ): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append(\r\n            'redirect_uri',\r\n            redirect_url\r\n        );\r\n        params = params.append(\r\n            'response_type',\r\n            this.authConfiguration.response_type\r\n        );\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign(\r\n            {},\r\n            this.oidcSecurityCommon.customRequestParams\r\n        );\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(\r\n        end_session_endpoint: string,\r\n        id_token_hint: string\r\n    ) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append(\r\n            'post_logout_redirect_uri',\r\n            this.authConfiguration.post_logout_redirect_uri\r\n        );\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\r\n\r\n    private onUserDataChanged() {\r\n        this.loggerService.logDebug(\r\n            `onUserDataChanged: last = ${this.lastUserData}, new = ${\r\n                this._userData.value\r\n            }`\r\n        );\r\n\r\n        if (this.lastUserData && !this._userData.value) {\r\n            this.loggerService.logDebug('onUserDataChanged: Logout detected.');\r\n            // TODO should we have an action here\r\n        }\r\n        this.lastUserData = this._userData.value;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.loggerService.logDebug(\r\n                'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\r\n            );\r\n\r\n            return this.oidcDataService\r\n                .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\r\n                .pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService\r\n            .get<JwtKeys>('undefined')\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return observableThrowError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n\r\n        /**\r\n            First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n            Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            if (this._userData.value && (this.oidcSecurityCommon.silentRenewRunning !== 'running') && this.getIdToken()) {\r\n                if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'IsAuthorized: id_token isTokenExpired, start silent renew if active'\r\n                    );\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(() => {\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        }, (err: any) => {\r\n                            this.loggerService.logError('Error: ' + err);\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        });\r\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        this.authorizedCallback(e.detail);\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n    ) { }\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(\r\n            map((data: any) => (this.userData = data))\r\n        );\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            return this.oidcDataService.getIdentityUserData(\r\n                this.authWellKnownEndpoints.userinfo_endpoint,\r\n                token\r\n            );\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(\r\n            'undefined',\r\n            token\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set(\n            'Authorization',\n            'Bearer ' + decodeURIComponent(token)\n        );\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observer ,  Observable } from 'rxjs';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    private sessionIframe: any;\r\n\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    initRenew() {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.loggerService.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\r\n\r\n    // TODO The return type of this method is never used. Is it needed?\r\n    startRenew(url: string): Observable<any> {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable, EventEmitter, Output, NgZone } from '@angular/core';\r\nimport { Observable ,  Observer } from 'rxjs';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\r\n    private _scheduledHeartBeat: any;\r\n\r\n    @Output()\r\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\r\n\r\n    constructor(\r\n        private authConfiguration: AuthConfiguration,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone\r\n    ) {}\r\n\r\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\r\n\r\n    doesSessionExist(): boolean {\r\n        let existsparent = undefined;\r\n        try {\r\n            const parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\r\n        } catch (e) {\r\n            // not accessible\r\n        }\r\n        const exists = window.document.getElementById(\r\n            'myiFrameForCheckSession'\r\n        );\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (existsparent || exists) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    init() {\r\n        this.sessionIframe = window.document.createElement('iframe');\r\n        this.sessionIframe.id = 'myiFrameForCheckSession';\r\n        this.loggerService.logDebug(this.sessionIframe);\r\n        this.sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(this.sessionIframe);\r\n\r\n        if (this.authWellKnownEndpoints) {\r\n            this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        this.iframeMessageEvent = this.messageHandler.bind(this);\r\n        window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: any): void {\r\n        if (!this._scheduledHeartBeat) {\r\n            this.pollServerSession(clientId);\r\n        }\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n        }\r\n    }\r\n\r\n    pollServerSession(clientId: any) {\r\n        const _pollServerSessionRecur = () => {\r\n            if (this.sessionIframe && clientId) {\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                const session_state = this.oidcSecurityCommon.sessionState;\r\n                if (session_state) {\r\n                    this.sessionIframe.contentWindow.postMessage(\r\n                        clientId + ' ' + session_state,\r\n                        this.authConfiguration.stsServer\r\n                    );\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning(\r\n                    'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\r\n                );\r\n                this.loggerService.logDebug(clientId);\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                // this.init();\r\n            }\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        });\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning(\r\n                    'error from checksession messageHandler'\r\n                );\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.loggerService.logDebug(\r\n                    e.data + ' from checksession messageHandler'\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\n\n@Injectable()\nexport class StateValidationService {\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult('', '', false, {});\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (this.authWellKnownEndpoints) {\n            if (\n                !this.oidcSecurityValidation.validate_id_token_iss(\n                    toReturn.decoded_id_token,\n                    this.authWellKnownEndpoints.issuer\n                )\n            ) {\n                this.loggerService.logWarning(\n                    'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n                );\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\r\nimport { ArrayHelperService } from './oidc-array-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n    constructor(\r\n        private arrayHelperService: ArrayHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    validate_id_token_exp_not_expired(\r\n        decoded_id_token: string,\r\n        offsetSeconds?: number\r\n    ): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(\r\n            decoded_id_token\r\n        );\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (\r\n            tokenExpirationDate.valueOf() >\r\n            new Date().valueOf() + offsetSeconds * 1000\r\n        );\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iss is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'sub is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'aud is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'exp is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iat is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(\r\n        dataIdToken: any,\r\n        max_offset_allowed_in_seconds: number\r\n    ): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return (\r\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\r\n            max_offset_allowed_in_seconds * 1000\r\n        );\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\r\n                    dataIdToken.nonce +\r\n                    ' local_nonce:' +\r\n                    local_nonce\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    validate_id_token_iss(\r\n        dataIdToken: any,\r\n        authWellKnownEndpoints_issuer: any\r\n    ): boolean {\r\n        if (\r\n            (dataIdToken.iss as string) !==\r\n            (authWellKnownEndpoints_issuer as string)\r\n        ) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.arraysEqual(\r\n                dataIdToken.aud,\r\n                aud\r\n            );\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug(\r\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\r\n                        dataIdToken.aud +\r\n                        ' client_id:' +\r\n                        aud\r\n                );\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\r\n                    dataIdToken.aud +\r\n                    ' client_id:' +\r\n                    aud\r\n            );\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if ((state as string) !== (local_state as string)) {\r\n            this.loggerService.logDebug(\r\n                'ValidateStateFromHashCallback failed, state: ' +\r\n                    state +\r\n                    ' local_state:' +\r\n                    local_state\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(\r\n        id_token_sub: any,\r\n        userdata_sub: any\r\n    ): boolean {\r\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\r\n            this.loggerService.logDebug(\r\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\r\n                    id_token_sub +\r\n                    ' userdata_sub:' +\r\n                    userdata_sub\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const header_data = this.tokenHelperService.getHeaderFromToken(\r\n            id_token,\r\n            false\r\n        );\r\n\r\n        if (\r\n            Object.keys(header_data).length === 0 &&\r\n            header_data.constructor === Object\r\n        ) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = header_data.kid;\r\n        const alg = header_data.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if (\r\n                    (key.kty as string) === 'RSA' &&\r\n                    (key.use as string) === 'sig'\r\n                ) {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning(\r\n                    'no keys found, incorrect Signature, validation failed for id_token'\r\n                );\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning(\r\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\r\n                );\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if (\r\n                        (key.kty as string) === 'RSA' &&\r\n                        (key.use as string) === 'sig'\r\n                    ) {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                            'RS256'\r\n                        ]);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning(\r\n                                'incorrect Signature, validation failed for id_token'\r\n                            );\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                        'RS256'\r\n                    ]);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning(\r\n                            'incorrect Signature, validation failed for id_token'\r\n                        );\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(response_type: string): boolean {\r\n        if (\r\n            response_type === 'id_token token' ||\r\n            response_type === 'id_token'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning(\r\n            'module configure incorrect, invalid response_type:' + response_type\r\n        );\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.loggerService.logDebug('From the server:' + at_hash);\r\n        const testdata = this.generate_at_hash('' + access_token);\r\n        this.loggerService.logDebug(\r\n            'client validation not decoded:' + testdata\r\n        );\r\n        if (testdata === (at_hash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash(\r\n                '' + decodeURIComponent(access_token)\r\n            );\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (at_hash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(access_token: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private authConfiguration: AuthConfiguration) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TokenHelperService {\n    constructor() {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getPayloadFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getHeaderFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getSignatureFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    urlBase64Decode(str: string) {\n        let output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        return window.atob(output);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ArrayHelperService {\n    constructor() {}\n\n    arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storage_auth_result = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\r\n\r\n    private storage_access_token = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\r\n\r\n    private storage_id_token = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\r\n\r\n    private storage_is_authorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\r\n\r\n    private storage_user_data = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\r\n\r\n    private storage_auth_nonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\r\n\r\n    private storage_auth_state_control = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\r\n\r\n    private storage_session_state = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\r\n\r\n    private storage_silent_renew_running = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\r\n\r\n    private storage_custom_request_params = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\r\n\r\n    public set customRequestParams(value: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\r\n\r\n    setupModule() {}\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n    // or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\r\n\r\nexport class OpenIDImplicitFlowConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_url = 'https://localhost:44311';\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    forbidden_route = '/forbidden';\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication = true;\r\n    trigger_authorization_result_event = false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    storage: any = sessionStorage;\r\n}\r\n\r\n@Injectable()\r\nexport class AuthConfiguration {\r\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration | undefined;\r\n\r\n    get stsServer(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.stsServer;\r\n        }\r\n\r\n        return this.defaultConfig.stsServer;\r\n    }\r\n\r\n    get redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.redirect_url;\r\n        }\r\n\r\n        return this.defaultConfig.redirect_url;\r\n    }\r\n\r\n    get silent_redirect_url(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_url;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_url;\r\n    }\r\n\r\n    get client_id(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.client_id;\r\n        }\r\n\r\n        return this.defaultConfig.client_id;\r\n    }\r\n\r\n    get response_type(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.response_type;\r\n        }\r\n\r\n        return this.defaultConfig.response_type;\r\n    }\r\n\r\n    get scope(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.scope;\r\n        }\r\n\r\n        return this.defaultConfig.scope;\r\n    }\r\n\r\n    get hd_param(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.hd_param;\r\n        }\r\n\r\n        return this.defaultConfig.hd_param;\r\n    }\r\n\r\n    get post_logout_redirect_uri(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri;\r\n        }\r\n\r\n        return this.defaultConfig.post_logout_redirect_uri;\r\n    }\r\n\r\n    get start_checksession(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.start_checksession;\r\n        }\r\n\r\n        return this.defaultConfig.start_checksession;\r\n    }\r\n\r\n    get silent_renew(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew;\r\n    }\r\n\r\n    get silent_renew_offset_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.silent_renew_offset_in_seconds;\r\n    }\r\n\r\n    get post_login_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.post_login_route;\r\n        }\r\n\r\n        return this.defaultConfig.post_login_route;\r\n    }\r\n\r\n    get forbidden_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.forbidden_route;\r\n        }\r\n\r\n        return this.defaultConfig.forbidden_route;\r\n    }\r\n\r\n    get unauthorized_route(): string {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.unauthorized_route;\r\n        }\r\n\r\n        return this.defaultConfig.unauthorized_route;\r\n    }\r\n\r\n    get auto_userinfo(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_userinfo;\r\n        }\r\n\r\n        return this.defaultConfig.auto_userinfo;\r\n    }\r\n\r\n    get auto_clean_state_after_authentication(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication;\r\n        }\r\n\r\n        return this.defaultConfig.auto_clean_state_after_authentication;\r\n    }\r\n\r\n    get trigger_authorization_result_event(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event;\r\n        }\r\n\r\n        return this.defaultConfig.trigger_authorization_result_event;\r\n    }\r\n\r\n    get log_console_warning_active(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_warning_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_warning_active;\r\n    }\r\n\r\n    get log_console_debug_active(): boolean {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.log_console_debug_active;\r\n        }\r\n\r\n        return this.defaultConfig.log_console_debug_active;\r\n    }\r\n\r\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds;\r\n        }\r\n\r\n        return this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\r\n    }\r\n\r\n    get storage(): any {\r\n        if (this.openIDImplicitFlowConfiguration) {\r\n            return this.openIDImplicitFlowConfiguration.storage;\r\n        }\r\n\r\n        return this.defaultConfig.storage;\r\n    }\r\n\r\n    constructor(private defaultConfig: DefaultConfiguration) {}\r\n\r\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\n}\r\n","export class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any\n    ) {}\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n  @Output() onConfigurationLoaded = new EventEmitter<boolean>();\r\n  clientConfiguration: any;\r\n  wellKnownEndpoints: any;\r\n\r\n  async load(configUrl: string) {\r\n    try {\r\n      const response = await fetch(configUrl);\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.clientConfiguration = await response.json();\r\n      await this.load_using_stsServer(this.clientConfiguration.stsServer);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load' threw an error on calling ${configUrl}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n\r\n  async load_using_stsServer(stsServer: string) {\r\n    try {\r\n      const response = await fetch(\r\n        `${stsServer}/.well-known/openid-configuration`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n\r\n  async load_using_custom_stsServer(stsServer: string) {\r\n    try {\r\n      const response = await fetch(stsServer);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch (err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\n}\r\n"],"names":["observableThrowError"],"mappings":"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"}